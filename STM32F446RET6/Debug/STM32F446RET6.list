
STM32F446RET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005664  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08005828  08005828  00006828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005850  08005850  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005850  08005850  00006850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005858  08005858  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005858  08005858  00006858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800585c  0800585c  0000685c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005860  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  2000000c  0800586c  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  0800586c  000071ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d04  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003007  00000000  00000000  00017d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  0001ad48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd8  00000000  00000000  0001be28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002635f  00000000  00000000  0001cb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001514d  00000000  00000000  00042e5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8fab  00000000  00000000  00057fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00140f57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004500  00000000  00000000  00140f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0014549c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005810 	.word	0x08005810

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08005810 	.word	0x08005810

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000536:	463b      	mov	r3, r7
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000542:	4b7d      	ldr	r3, [pc, #500]	@ (8000738 <MX_ADC1_Init+0x208>)
 8000544:	4a7d      	ldr	r2, [pc, #500]	@ (800073c <MX_ADC1_Init+0x20c>)
 8000546:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000548:	4b7b      	ldr	r3, [pc, #492]	@ (8000738 <MX_ADC1_Init+0x208>)
 800054a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800054e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000550:	4b79      	ldr	r3, [pc, #484]	@ (8000738 <MX_ADC1_Init+0x208>)
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000556:	4b78      	ldr	r3, [pc, #480]	@ (8000738 <MX_ADC1_Init+0x208>)
 8000558:	2201      	movs	r2, #1
 800055a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800055c:	4b76      	ldr	r3, [pc, #472]	@ (8000738 <MX_ADC1_Init+0x208>)
 800055e:	2200      	movs	r2, #0
 8000560:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000562:	4b75      	ldr	r3, [pc, #468]	@ (8000738 <MX_ADC1_Init+0x208>)
 8000564:	2200      	movs	r2, #0
 8000566:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800056a:	4b73      	ldr	r3, [pc, #460]	@ (8000738 <MX_ADC1_Init+0x208>)
 800056c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000570:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000572:	4b71      	ldr	r3, [pc, #452]	@ (8000738 <MX_ADC1_Init+0x208>)
 8000574:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000578:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800057a:	4b6f      	ldr	r3, [pc, #444]	@ (8000738 <MX_ADC1_Init+0x208>)
 800057c:	2200      	movs	r2, #0
 800057e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8000580:	4b6d      	ldr	r3, [pc, #436]	@ (8000738 <MX_ADC1_Init+0x208>)
 8000582:	220e      	movs	r2, #14
 8000584:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000586:	4b6c      	ldr	r3, [pc, #432]	@ (8000738 <MX_ADC1_Init+0x208>)
 8000588:	2201      	movs	r2, #1
 800058a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800058e:	4b6a      	ldr	r3, [pc, #424]	@ (8000738 <MX_ADC1_Init+0x208>)
 8000590:	2201      	movs	r2, #1
 8000592:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000594:	4868      	ldr	r0, [pc, #416]	@ (8000738 <MX_ADC1_Init+0x208>)
 8000596:	f001 fa2b 	bl	80019f0 <HAL_ADC_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80005a0:	f000 fbec 	bl	8000d7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005a8:	2301      	movs	r3, #1
 80005aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80005ac:	2301      	movs	r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b0:	463b      	mov	r3, r7
 80005b2:	4619      	mov	r1, r3
 80005b4:	4860      	ldr	r0, [pc, #384]	@ (8000738 <MX_ADC1_Init+0x208>)
 80005b6:	f001 fb8d 	bl	8001cd4 <HAL_ADC_ConfigChannel>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80005c0:	f000 fbdc 	bl	8000d7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005c4:	2301      	movs	r3, #1
 80005c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005cc:	463b      	mov	r3, r7
 80005ce:	4619      	mov	r1, r3
 80005d0:	4859      	ldr	r0, [pc, #356]	@ (8000738 <MX_ADC1_Init+0x208>)
 80005d2:	f001 fb7f 	bl	8001cd4 <HAL_ADC_ConfigChannel>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80005dc:	f000 fbce 	bl	8000d7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80005e4:	2303      	movs	r3, #3
 80005e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e8:	463b      	mov	r3, r7
 80005ea:	4619      	mov	r1, r3
 80005ec:	4852      	ldr	r0, [pc, #328]	@ (8000738 <MX_ADC1_Init+0x208>)
 80005ee:	f001 fb71 	bl	8001cd4 <HAL_ADC_ConfigChannel>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80005f8:	f000 fbc0 	bl	8000d7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005fc:	2303      	movs	r3, #3
 80005fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000600:	2304      	movs	r3, #4
 8000602:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000604:	463b      	mov	r3, r7
 8000606:	4619      	mov	r1, r3
 8000608:	484b      	ldr	r0, [pc, #300]	@ (8000738 <MX_ADC1_Init+0x208>)
 800060a:	f001 fb63 	bl	8001cd4 <HAL_ADC_ConfigChannel>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000614:	f000 fbb2 	bl	8000d7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000618:	2304      	movs	r3, #4
 800061a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800061c:	2305      	movs	r3, #5
 800061e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	4619      	mov	r1, r3
 8000624:	4844      	ldr	r0, [pc, #272]	@ (8000738 <MX_ADC1_Init+0x208>)
 8000626:	f001 fb55 	bl	8001cd4 <HAL_ADC_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8000630:	f000 fba4 	bl	8000d7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000634:	2305      	movs	r3, #5
 8000636:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000638:	2306      	movs	r3, #6
 800063a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063c:	463b      	mov	r3, r7
 800063e:	4619      	mov	r1, r3
 8000640:	483d      	ldr	r0, [pc, #244]	@ (8000738 <MX_ADC1_Init+0x208>)
 8000642:	f001 fb47 	bl	8001cd4 <HAL_ADC_ConfigChannel>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 800064c:	f000 fb96 	bl	8000d7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000650:	2306      	movs	r3, #6
 8000652:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000654:	2307      	movs	r3, #7
 8000656:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4836      	ldr	r0, [pc, #216]	@ (8000738 <MX_ADC1_Init+0x208>)
 800065e:	f001 fb39 	bl	8001cd4 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8000668:	f000 fb88 	bl	8000d7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800066c:	2307      	movs	r3, #7
 800066e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000670:	2308      	movs	r3, #8
 8000672:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000674:	463b      	mov	r3, r7
 8000676:	4619      	mov	r1, r3
 8000678:	482f      	ldr	r0, [pc, #188]	@ (8000738 <MX_ADC1_Init+0x208>)
 800067a:	f001 fb2b 	bl	8001cd4 <HAL_ADC_ConfigChannel>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 8000684:	f000 fb7a 	bl	8000d7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000688:	2308      	movs	r3, #8
 800068a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800068c:	2309      	movs	r3, #9
 800068e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000690:	463b      	mov	r3, r7
 8000692:	4619      	mov	r1, r3
 8000694:	4828      	ldr	r0, [pc, #160]	@ (8000738 <MX_ADC1_Init+0x208>)
 8000696:	f001 fb1d 	bl	8001cd4 <HAL_ADC_ConfigChannel>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC1_Init+0x174>
  {
    Error_Handler();
 80006a0:	f000 fb6c 	bl	8000d7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80006a4:	2309      	movs	r3, #9
 80006a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80006a8:	230a      	movs	r3, #10
 80006aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ac:	463b      	mov	r3, r7
 80006ae:	4619      	mov	r1, r3
 80006b0:	4821      	ldr	r0, [pc, #132]	@ (8000738 <MX_ADC1_Init+0x208>)
 80006b2:	f001 fb0f 	bl	8001cd4 <HAL_ADC_ConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_ADC1_Init+0x190>
  {
    Error_Handler();
 80006bc:	f000 fb5e 	bl	8000d7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006c0:	230a      	movs	r3, #10
 80006c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80006c4:	230b      	movs	r3, #11
 80006c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c8:	463b      	mov	r3, r7
 80006ca:	4619      	mov	r1, r3
 80006cc:	481a      	ldr	r0, [pc, #104]	@ (8000738 <MX_ADC1_Init+0x208>)
 80006ce:	f001 fb01 	bl	8001cd4 <HAL_ADC_ConfigChannel>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 80006d8:	f000 fb50 	bl	8000d7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80006dc:	230b      	movs	r3, #11
 80006de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80006e0:	230c      	movs	r3, #12
 80006e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e4:	463b      	mov	r3, r7
 80006e6:	4619      	mov	r1, r3
 80006e8:	4813      	ldr	r0, [pc, #76]	@ (8000738 <MX_ADC1_Init+0x208>)
 80006ea:	f001 faf3 	bl	8001cd4 <HAL_ADC_ConfigChannel>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_ADC1_Init+0x1c8>
  {
    Error_Handler();
 80006f4:	f000 fb42 	bl	8000d7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80006f8:	230c      	movs	r3, #12
 80006fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80006fc:	230d      	movs	r3, #13
 80006fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000700:	463b      	mov	r3, r7
 8000702:	4619      	mov	r1, r3
 8000704:	480c      	ldr	r0, [pc, #48]	@ (8000738 <MX_ADC1_Init+0x208>)
 8000706:	f001 fae5 	bl	8001cd4 <HAL_ADC_ConfigChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0x1e4>
  {
    Error_Handler();
 8000710:	f000 fb34 	bl	8000d7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000714:	230d      	movs	r3, #13
 8000716:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8000718:	230e      	movs	r3, #14
 800071a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800071c:	463b      	mov	r3, r7
 800071e:	4619      	mov	r1, r3
 8000720:	4805      	ldr	r0, [pc, #20]	@ (8000738 <MX_ADC1_Init+0x208>)
 8000722:	f001 fad7 	bl	8001cd4 <HAL_ADC_ConfigChannel>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_ADC1_Init+0x200>
  {
    Error_Handler();
 800072c:	f000 fb26 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000028 	.word	0x20000028
 800073c:	40012000 	.word	0x40012000

08000740 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08c      	sub	sp, #48	@ 0x30
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 031c 	add.w	r3, r7, #28
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a4d      	ldr	r2, [pc, #308]	@ (8000894 <HAL_ADC_MspInit+0x154>)
 800075e:	4293      	cmp	r3, r2
 8000760:	f040 8094 	bne.w	800088c <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
 8000768:	4b4b      	ldr	r3, [pc, #300]	@ (8000898 <HAL_ADC_MspInit+0x158>)
 800076a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076c:	4a4a      	ldr	r2, [pc, #296]	@ (8000898 <HAL_ADC_MspInit+0x158>)
 800076e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000772:	6453      	str	r3, [r2, #68]	@ 0x44
 8000774:	4b48      	ldr	r3, [pc, #288]	@ (8000898 <HAL_ADC_MspInit+0x158>)
 8000776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800077c:	61bb      	str	r3, [r7, #24]
 800077e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	4b44      	ldr	r3, [pc, #272]	@ (8000898 <HAL_ADC_MspInit+0x158>)
 8000786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000788:	4a43      	ldr	r2, [pc, #268]	@ (8000898 <HAL_ADC_MspInit+0x158>)
 800078a:	f043 0304 	orr.w	r3, r3, #4
 800078e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000790:	4b41      	ldr	r3, [pc, #260]	@ (8000898 <HAL_ADC_MspInit+0x158>)
 8000792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000794:	f003 0304 	and.w	r3, r3, #4
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	4b3d      	ldr	r3, [pc, #244]	@ (8000898 <HAL_ADC_MspInit+0x158>)
 80007a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a4:	4a3c      	ldr	r2, [pc, #240]	@ (8000898 <HAL_ADC_MspInit+0x158>)
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ac:	4b3a      	ldr	r3, [pc, #232]	@ (8000898 <HAL_ADC_MspInit+0x158>)
 80007ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b0:	f003 0301 	and.w	r3, r3, #1
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	4b36      	ldr	r3, [pc, #216]	@ (8000898 <HAL_ADC_MspInit+0x158>)
 80007be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c0:	4a35      	ldr	r2, [pc, #212]	@ (8000898 <HAL_ADC_MspInit+0x158>)
 80007c2:	f043 0302 	orr.w	r3, r3, #2
 80007c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c8:	4b33      	ldr	r3, [pc, #204]	@ (8000898 <HAL_ADC_MspInit+0x158>)
 80007ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007cc:	f003 0302 	and.w	r3, r3, #2
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80007d4:	230f      	movs	r3, #15
 80007d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007d8:	2303      	movs	r3, #3
 80007da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4619      	mov	r1, r3
 80007e6:	482d      	ldr	r0, [pc, #180]	@ (800089c <HAL_ADC_MspInit+0x15c>)
 80007e8:	f002 f8a8 	bl	800293c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007ec:	23ff      	movs	r3, #255	@ 0xff
 80007ee:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f0:	2303      	movs	r3, #3
 80007f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4619      	mov	r1, r3
 80007fe:	4828      	ldr	r0, [pc, #160]	@ (80008a0 <HAL_ADC_MspInit+0x160>)
 8000800:	f002 f89c 	bl	800293c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000804:	2303      	movs	r3, #3
 8000806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000808:	2303      	movs	r3, #3
 800080a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	4823      	ldr	r0, [pc, #140]	@ (80008a4 <HAL_ADC_MspInit+0x164>)
 8000818:	f002 f890 	bl	800293c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800081c:	4b22      	ldr	r3, [pc, #136]	@ (80008a8 <HAL_ADC_MspInit+0x168>)
 800081e:	4a23      	ldr	r2, [pc, #140]	@ (80008ac <HAL_ADC_MspInit+0x16c>)
 8000820:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000822:	4b21      	ldr	r3, [pc, #132]	@ (80008a8 <HAL_ADC_MspInit+0x168>)
 8000824:	2200      	movs	r2, #0
 8000826:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000828:	4b1f      	ldr	r3, [pc, #124]	@ (80008a8 <HAL_ADC_MspInit+0x168>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800082e:	4b1e      	ldr	r3, [pc, #120]	@ (80008a8 <HAL_ADC_MspInit+0x168>)
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000834:	4b1c      	ldr	r3, [pc, #112]	@ (80008a8 <HAL_ADC_MspInit+0x168>)
 8000836:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800083a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800083c:	4b1a      	ldr	r3, [pc, #104]	@ (80008a8 <HAL_ADC_MspInit+0x168>)
 800083e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000842:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000844:	4b18      	ldr	r3, [pc, #96]	@ (80008a8 <HAL_ADC_MspInit+0x168>)
 8000846:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800084a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800084c:	4b16      	ldr	r3, [pc, #88]	@ (80008a8 <HAL_ADC_MspInit+0x168>)
 800084e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000852:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000854:	4b14      	ldr	r3, [pc, #80]	@ (80008a8 <HAL_ADC_MspInit+0x168>)
 8000856:	2200      	movs	r2, #0
 8000858:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800085a:	4b13      	ldr	r3, [pc, #76]	@ (80008a8 <HAL_ADC_MspInit+0x168>)
 800085c:	2200      	movs	r2, #0
 800085e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000860:	4811      	ldr	r0, [pc, #68]	@ (80008a8 <HAL_ADC_MspInit+0x168>)
 8000862:	f001 fd81 	bl	8002368 <HAL_DMA_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 800086c:	f000 fa86 	bl	8000d7c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a0d      	ldr	r2, [pc, #52]	@ (80008a8 <HAL_ADC_MspInit+0x168>)
 8000874:	639a      	str	r2, [r3, #56]	@ 0x38
 8000876:	4a0c      	ldr	r2, [pc, #48]	@ (80008a8 <HAL_ADC_MspInit+0x168>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800087c:	2200      	movs	r2, #0
 800087e:	2100      	movs	r1, #0
 8000880:	2012      	movs	r0, #18
 8000882:	f001 fd3a 	bl	80022fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000886:	2012      	movs	r0, #18
 8000888:	f001 fd53 	bl	8002332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800088c:	bf00      	nop
 800088e:	3730      	adds	r7, #48	@ 0x30
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40012000 	.word	0x40012000
 8000898:	40023800 	.word	0x40023800
 800089c:	40020800 	.word	0x40020800
 80008a0:	40020000 	.word	0x40020000
 80008a4:	40020400 	.word	0x40020400
 80008a8:	20000070 	.word	0x20000070
 80008ac:	40026410 	.word	0x40026410

080008b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b4:	4b04      	ldr	r3, [pc, #16]	@ (80008c8 <__NVIC_GetPriorityGrouping+0x18>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	0a1b      	lsrs	r3, r3, #8
 80008ba:	f003 0307 	and.w	r3, r3, #7
}
 80008be:	4618      	mov	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	db0b      	blt.n	80008f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	f003 021f 	and.w	r2, r3, #31
 80008e4:	4907      	ldr	r1, [pc, #28]	@ (8000904 <__NVIC_EnableIRQ+0x38>)
 80008e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ea:	095b      	lsrs	r3, r3, #5
 80008ec:	2001      	movs	r0, #1
 80008ee:	fa00 f202 	lsl.w	r2, r0, r2
 80008f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000e100 	.word	0xe000e100

08000908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	6039      	str	r1, [r7, #0]
 8000912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000918:	2b00      	cmp	r3, #0
 800091a:	db0a      	blt.n	8000932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	b2da      	uxtb	r2, r3
 8000920:	490c      	ldr	r1, [pc, #48]	@ (8000954 <__NVIC_SetPriority+0x4c>)
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	0112      	lsls	r2, r2, #4
 8000928:	b2d2      	uxtb	r2, r2
 800092a:	440b      	add	r3, r1
 800092c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000930:	e00a      	b.n	8000948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4908      	ldr	r1, [pc, #32]	@ (8000958 <__NVIC_SetPriority+0x50>)
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	f003 030f 	and.w	r3, r3, #15
 800093e:	3b04      	subs	r3, #4
 8000940:	0112      	lsls	r2, r2, #4
 8000942:	b2d2      	uxtb	r2, r2
 8000944:	440b      	add	r3, r1
 8000946:	761a      	strb	r2, [r3, #24]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	e000e100 	.word	0xe000e100
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800095c:	b480      	push	{r7}
 800095e:	b089      	sub	sp, #36	@ 0x24
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	f1c3 0307 	rsb	r3, r3, #7
 8000976:	2b04      	cmp	r3, #4
 8000978:	bf28      	it	cs
 800097a:	2304      	movcs	r3, #4
 800097c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	3304      	adds	r3, #4
 8000982:	2b06      	cmp	r3, #6
 8000984:	d902      	bls.n	800098c <NVIC_EncodePriority+0x30>
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	3b03      	subs	r3, #3
 800098a:	e000      	b.n	800098e <NVIC_EncodePriority+0x32>
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000990:	f04f 32ff 	mov.w	r2, #4294967295
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43da      	mvns	r2, r3
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	401a      	ands	r2, r3
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a4:	f04f 31ff 	mov.w	r1, #4294967295
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	fa01 f303 	lsl.w	r3, r1, r3
 80009ae:	43d9      	mvns	r1, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b4:	4313      	orrs	r3, r2
         );
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3724      	adds	r7, #36	@ 0x24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
	...

080009c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <MX_DMA_Init+0x5c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a13      	ldr	r2, [pc, #76]	@ (8000a20 <MX_DMA_Init+0x5c>)
 80009d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <MX_DMA_Init+0x5c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2100      	movs	r1, #0
 80009ea:	2038      	movs	r0, #56	@ 0x38
 80009ec:	f001 fc85 	bl	80022fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009f0:	2038      	movs	r0, #56	@ 0x38
 80009f2:	f001 fc9e 	bl	8002332 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80009f6:	f7ff ff5b 	bl	80008b0 <__NVIC_GetPriorityGrouping>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2200      	movs	r2, #0
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ffab 	bl	800095c <NVIC_EncodePriority>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4619      	mov	r1, r3
 8000a0a:	2039      	movs	r0, #57	@ 0x39
 8000a0c:	f7ff ff7c 	bl	8000908 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a10:	2039      	movs	r0, #57	@ 0x39
 8000a12:	f7ff ff5b 	bl	80008cc <__NVIC_EnableIRQ>

}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800

08000a24 <MX_GPIO_Init>:
     PB5   ------> S_TIM3_CH2
     PB6   ------> S_TIM4_CH1
     PB7   ------> S_TIM4_CH2
*/
void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	@ 0x28
 8000a28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b61      	ldr	r3, [pc, #388]	@ (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	4a60      	ldr	r2, [pc, #384]	@ (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000a44:	f043 0304 	orr.w	r3, r3, #4
 8000a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4a:	4b5e      	ldr	r3, [pc, #376]	@ (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	f003 0304 	and.w	r3, r3, #4
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b5a      	ldr	r3, [pc, #360]	@ (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a59      	ldr	r2, [pc, #356]	@ (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000a60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b57      	ldr	r3, [pc, #348]	@ (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	4b53      	ldr	r3, [pc, #332]	@ (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4a52      	ldr	r2, [pc, #328]	@ (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a82:	4b50      	ldr	r3, [pc, #320]	@ (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b4c      	ldr	r3, [pc, #304]	@ (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	4a4b      	ldr	r2, [pc, #300]	@ (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9e:	4b49      	ldr	r3, [pc, #292]	@ (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b45      	ldr	r3, [pc, #276]	@ (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	4a44      	ldr	r2, [pc, #272]	@ (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000ab4:	f043 0308 	orr.w	r3, r3, #8
 8000ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aba:	4b42      	ldr	r3, [pc, #264]	@ (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	f003 0308 	and.w	r3, r3, #8
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_8
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f246 3110 	movw	r1, #25360	@ 0x6310
 8000acc:	483e      	ldr	r0, [pc, #248]	@ (8000bc8 <MX_GPIO_Init+0x1a4>)
 8000ace:	f002 f8c9 	bl	8002c64 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2104      	movs	r1, #4
 8000ad6:	483d      	ldr	r0, [pc, #244]	@ (8000bcc <MX_GPIO_Init+0x1a8>)
 8000ad8:	f002 f8c4 	bl	8002c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000ae2:	483b      	ldr	r0, [pc, #236]	@ (8000bd0 <MX_GPIO_Init+0x1ac>)
 8000ae4:	f002 f8be 	bl	8002c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC4 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_8
 8000ae8:	f246 3310 	movw	r3, #25360	@ 0x6310
 8000aec:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	4831      	ldr	r0, [pc, #196]	@ (8000bc8 <MX_GPIO_Init+0x1a4>)
 8000b02:	f001 ff1b 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 8000b06:	f44f 431c 	mov.w	r3, #39936	@ 0x9c00
 8000b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	482e      	ldr	r0, [pc, #184]	@ (8000bd4 <MX_GPIO_Init+0x1b0>)
 8000b1c:	f001 ff0e 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b20:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b32:	2307      	movs	r3, #7
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4822      	ldr	r0, [pc, #136]	@ (8000bc8 <MX_GPIO_Init+0x1a4>)
 8000b3e:	f001 fefd 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b42:	2304      	movs	r3, #4
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	481c      	ldr	r0, [pc, #112]	@ (8000bcc <MX_GPIO_Init+0x1a8>)
 8000b5a:	f001 feef 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b5e:	2330      	movs	r3, #48	@ 0x30
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4815      	ldr	r0, [pc, #84]	@ (8000bd0 <MX_GPIO_Init+0x1ac>)
 8000b7a:	f001 fedf 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b7e:	23c0      	movs	r3, #192	@ 0xc0
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	480d      	ldr	r0, [pc, #52]	@ (8000bd0 <MX_GPIO_Init+0x1ac>)
 8000b9a:	f001 fecf 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b9e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4806      	ldr	r0, [pc, #24]	@ (8000bd0 <MX_GPIO_Init+0x1ac>)
 8000bb8:	f001 fec0 	bl	800293c <HAL_GPIO_Init>

}
 8000bbc:	bf00      	nop
 8000bbe:	3728      	adds	r7, #40	@ 0x28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020800 	.word	0x40020800
 8000bcc:	40020c00 	.word	0x40020c00
 8000bd0:	40020400 	.word	0x40020400
 8000bd4:	40020000 	.word	0x40020000

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bdc:	f000 fe72 	bl	80018c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be0:	f000 f85a 	bl	8000c98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be4:	f7ff ff1e 	bl	8000a24 <MX_GPIO_Init>
  MX_DMA_Init();
 8000be8:	f7ff feec 	bl	80009c4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000bec:	f7ff fca0 	bl	8000530 <MX_ADC1_Init>
  MX_TIM8_Init();
 8000bf0:	f000 fa72 	bl	80010d8 <MX_TIM8_Init>
  MX_TIM6_Init();
 8000bf4:	f000 fa3c 	bl	8001070 <MX_TIM6_Init>
  MX_USART6_UART_Init();
 8000bf8:	f000 fd9a 	bl	8001730 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8000bfc:	f000 f98c 	bl	8000f18 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim8);
 8000c00:	4821      	ldr	r0, [pc, #132]	@ (8000c88 <main+0xb0>)
 8000c02:	f002 fe9b 	bl	800393c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000c06:	4821      	ldr	r0, [pc, #132]	@ (8000c8c <main+0xb4>)
 8000c08:	f002 fe98 	bl	800393c <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4820      	ldr	r0, [pc, #128]	@ (8000c90 <main+0xb8>)
 8000c10:	f002 ff5e 	bl	8003ad0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000c14:	2104      	movs	r1, #4
 8000c16:	481e      	ldr	r0, [pc, #120]	@ (8000c90 <main+0xb8>)
 8000c18:	f002 ff5a 	bl	8003ad0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	481c      	ldr	r0, [pc, #112]	@ (8000c90 <main+0xb8>)
 8000c20:	f003 fde0 	bl	80047e4 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000c24:	2104      	movs	r1, #4
 8000c26:	481a      	ldr	r0, [pc, #104]	@ (8000c90 <main+0xb8>)
 8000c28:	f003 fddc 	bl	80047e4 <HAL_TIMEx_PWMN_Start>
//		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
//	  } else {
//		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13 , 0);
//	  }

	  TIM1->CCR1 = 0;
 8000c2c:	4b19      	ldr	r3, [pc, #100]	@ (8000c94 <main+0xbc>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM1->CCR2 = 0;
 8000c32:	4b18      	ldr	r3, [pc, #96]	@ (8000c94 <main+0xbc>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	639a      	str	r2, [r3, #56]	@ 0x38
	  HAL_Delay(500);
 8000c38:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c3c:	f000 feb4 	bl	80019a8 <HAL_Delay>
	  TIM1->CCR1 = 150;
 8000c40:	4b14      	ldr	r3, [pc, #80]	@ (8000c94 <main+0xbc>)
 8000c42:	2296      	movs	r2, #150	@ 0x96
 8000c44:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM1->CCR2 = 150;
 8000c46:	4b13      	ldr	r3, [pc, #76]	@ (8000c94 <main+0xbc>)
 8000c48:	2296      	movs	r2, #150	@ 0x96
 8000c4a:	639a      	str	r2, [r3, #56]	@ 0x38
	  HAL_Delay(500);
 8000c4c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c50:	f000 feaa 	bl	80019a8 <HAL_Delay>
	  TIM1->CCR1 = 300;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	@ (8000c94 <main+0xbc>)
 8000c56:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000c5a:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM1->CCR2 = 300;
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c94 <main+0xbc>)
 8000c5e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000c62:	639a      	str	r2, [r3, #56]	@ 0x38
	  HAL_Delay(500);
 8000c64:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c68:	f000 fe9e 	bl	80019a8 <HAL_Delay>
	  TIM1->CCR1 = 500;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <main+0xbc>)
 8000c6e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000c72:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM1->CCR2 = 500;
 8000c74:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <main+0xbc>)
 8000c76:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000c7a:	639a      	str	r2, [r3, #56]	@ 0x38
	  HAL_Delay(500);
 8000c7c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c80:	f000 fe92 	bl	80019a8 <HAL_Delay>
	  TIM1->CCR1 = 0;
 8000c84:	bf00      	nop
 8000c86:	e7d1      	b.n	8000c2c <main+0x54>
 8000c88:	20000160 	.word	0x20000160
 8000c8c:	20000118 	.word	0x20000118
 8000c90:	200000d0 	.word	0x200000d0
 8000c94:	40010000 	.word	0x40010000

08000c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b094      	sub	sp, #80	@ 0x50
 8000c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	2234      	movs	r2, #52	@ 0x34
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f004 fd86 	bl	80057b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cac:	f107 0308 	add.w	r3, r7, #8
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	4b2c      	ldr	r3, [pc, #176]	@ (8000d74 <SystemClock_Config+0xdc>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc4:	4a2b      	ldr	r2, [pc, #172]	@ (8000d74 <SystemClock_Config+0xdc>)
 8000cc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ccc:	4b29      	ldr	r3, [pc, #164]	@ (8000d74 <SystemClock_Config+0xdc>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cd8:	2300      	movs	r3, #0
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	4b26      	ldr	r3, [pc, #152]	@ (8000d78 <SystemClock_Config+0xe0>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a25      	ldr	r2, [pc, #148]	@ (8000d78 <SystemClock_Config+0xe0>)
 8000ce2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	4b23      	ldr	r3, [pc, #140]	@ (8000d78 <SystemClock_Config+0xe0>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cf0:	603b      	str	r3, [r7, #0]
 8000cf2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cf8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cfc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d02:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d06:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d08:	2308      	movs	r3, #8
 8000d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000d0c:	23b4      	movs	r3, #180	@ 0xb4
 8000d0e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d10:	2302      	movs	r3, #2
 8000d12:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d14:	2302      	movs	r3, #2
 8000d16:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1c:	f107 031c 	add.w	r3, r7, #28
 8000d20:	4618      	mov	r0, r3
 8000d22:	f002 fb1d 	bl	8003360 <HAL_RCC_OscConfig>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d2c:	f000 f826 	bl	8000d7c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d30:	f001 ffb2 	bl	8002c98 <HAL_PWREx_EnableOverDrive>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d3a:	f000 f81f 	bl	8000d7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3e:	230f      	movs	r3, #15
 8000d40:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d42:	2302      	movs	r3, #2
 8000d44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d4a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d54:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d56:	f107 0308 	add.w	r3, r7, #8
 8000d5a:	2105      	movs	r1, #5
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f001 ffeb 	bl	8002d38 <HAL_RCC_ClockConfig>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000d68:	f000 f808 	bl	8000d7c <Error_Handler>
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	3750      	adds	r7, #80	@ 0x50
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40007000 	.word	0x40007000

08000d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d80:	b672      	cpsid	i
}
 8000d82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <Error_Handler+0x8>

08000d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	4b10      	ldr	r3, [pc, #64]	@ (8000dd4 <HAL_MspInit+0x4c>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d96:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd4 <HAL_MspInit+0x4c>)
 8000d98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd4 <HAL_MspInit+0x4c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	603b      	str	r3, [r7, #0]
 8000dae:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <HAL_MspInit+0x4c>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db2:	4a08      	ldr	r2, [pc, #32]	@ (8000dd4 <HAL_MspInit+0x4c>)
 8000db4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dba:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <HAL_MspInit+0x4c>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <NMI_Handler+0x4>

08000de0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <HardFault_Handler+0x4>

08000de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <MemManage_Handler+0x4>

08000df0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <BusFault_Handler+0x4>

08000df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <UsageFault_Handler+0x4>

08000e00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e2e:	f000 fd9b 	bl	8001968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e3c:	4802      	ldr	r0, [pc, #8]	@ (8000e48 <ADC_IRQHandler+0x10>)
 8000e3e:	f000 fe1a 	bl	8001a76 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000028 	.word	0x20000028

08000e4c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e50:	4802      	ldr	r0, [pc, #8]	@ (8000e5c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000e52:	f002 ff05 	bl	8003c60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200000d0 	.word	0x200000d0

08000e60 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e64:	4802      	ldr	r0, [pc, #8]	@ (8000e70 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e66:	f002 fefb 	bl	8003c60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200000d0 	.word	0x200000d0

08000e74 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e78:	4802      	ldr	r0, [pc, #8]	@ (8000e84 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000e7a:	f002 fef1 	bl	8003c60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200000d0 	.word	0x200000d0

08000e88 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e8c:	4802      	ldr	r0, [pc, #8]	@ (8000e98 <TIM1_CC_IRQHandler+0x10>)
 8000e8e:	f002 fee7 	bl	8003c60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200000d0 	.word	0x200000d0

08000e9c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000ea0:	4802      	ldr	r0, [pc, #8]	@ (8000eac <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000ea2:	f002 fedd 	bl	8003c60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000160 	.word	0x20000160

08000eb0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000eb4:	4802      	ldr	r0, [pc, #8]	@ (8000ec0 <TIM6_DAC_IRQHandler+0x10>)
 8000eb6:	f002 fed3 	bl	8003c60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000118 	.word	0x20000118

08000ec4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ec8:	4802      	ldr	r0, [pc, #8]	@ (8000ed4 <DMA2_Stream0_IRQHandler+0x10>)
 8000eca:	f001 fafb 	bl	80024c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000070 	.word	0x20000070

08000ed8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef8:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <SystemInit+0x20>)
 8000efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000efe:	4a05      	ldr	r2, [pc, #20]	@ (8000f14 <SystemInit+0x20>)
 8000f00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b096      	sub	sp, #88	@ 0x58
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f1e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	611a      	str	r2, [r3, #16]
 8000f46:	615a      	str	r2, [r3, #20]
 8000f48:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2220      	movs	r2, #32
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f004 fc31 	bl	80057b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f56:	4b44      	ldr	r3, [pc, #272]	@ (8001068 <MX_TIM1_Init+0x150>)
 8000f58:	4a44      	ldr	r2, [pc, #272]	@ (800106c <MX_TIM1_Init+0x154>)
 8000f5a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18-1;
 8000f5c:	4b42      	ldr	r3, [pc, #264]	@ (8001068 <MX_TIM1_Init+0x150>)
 8000f5e:	2211      	movs	r2, #17
 8000f60:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f62:	4b41      	ldr	r3, [pc, #260]	@ (8001068 <MX_TIM1_Init+0x150>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000f68:	4b3f      	ldr	r3, [pc, #252]	@ (8001068 <MX_TIM1_Init+0x150>)
 8000f6a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f6e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f70:	4b3d      	ldr	r3, [pc, #244]	@ (8001068 <MX_TIM1_Init+0x150>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f76:	4b3c      	ldr	r3, [pc, #240]	@ (8001068 <MX_TIM1_Init+0x150>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7c:	4b3a      	ldr	r3, [pc, #232]	@ (8001068 <MX_TIM1_Init+0x150>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f82:	4839      	ldr	r0, [pc, #228]	@ (8001068 <MX_TIM1_Init+0x150>)
 8000f84:	f002 fc8a 	bl	800389c <HAL_TIM_Base_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000f8e:	f7ff fef5 	bl	8000d7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f96:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f98:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4832      	ldr	r0, [pc, #200]	@ (8001068 <MX_TIM1_Init+0x150>)
 8000fa0:	f003 f810 	bl	8003fc4 <HAL_TIM_ConfigClockSource>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000faa:	f7ff fee7 	bl	8000d7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fae:	482e      	ldr	r0, [pc, #184]	@ (8001068 <MX_TIM1_Init+0x150>)
 8000fb0:	f002 fd34 	bl	8003a1c <HAL_TIM_PWM_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000fba:	f7ff fedf 	bl	8000d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fc6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4826      	ldr	r0, [pc, #152]	@ (8001068 <MX_TIM1_Init+0x150>)
 8000fce:	f003 fcc3 	bl	8004958 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000fd8:	f7ff fed0 	bl	8000d7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fdc:	2360      	movs	r3, #96	@ 0x60
 8000fde:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	4619      	mov	r1, r3
 8001000:	4819      	ldr	r0, [pc, #100]	@ (8001068 <MX_TIM1_Init+0x150>)
 8001002:	f002 ff1d 	bl	8003e40 <HAL_TIM_PWM_ConfigChannel>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800100c:	f7ff feb6 	bl	8000d7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001010:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001014:	2204      	movs	r2, #4
 8001016:	4619      	mov	r1, r3
 8001018:	4813      	ldr	r0, [pc, #76]	@ (8001068 <MX_TIM1_Init+0x150>)
 800101a:	f002 ff11 	bl	8003e40 <HAL_TIM_PWM_ConfigChannel>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001024:	f7ff feaa 	bl	8000d7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800103c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001040:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	4619      	mov	r1, r3
 800104a:	4807      	ldr	r0, [pc, #28]	@ (8001068 <MX_TIM1_Init+0x150>)
 800104c:	f003 fd00 	bl	8004a50 <HAL_TIMEx_ConfigBreakDeadTime>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001056:	f7ff fe91 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800105a:	4803      	ldr	r0, [pc, #12]	@ (8001068 <MX_TIM1_Init+0x150>)
 800105c:	f000 f908 	bl	8001270 <HAL_TIM_MspPostInit>

}
 8001060:	bf00      	nop
 8001062:	3758      	adds	r7, #88	@ 0x58
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200000d0 	.word	0x200000d0
 800106c:	40010000 	.word	0x40010000

08001070 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001076:	463b      	mov	r3, r7
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800107e:	4b14      	ldr	r3, [pc, #80]	@ (80010d0 <MX_TIM6_Init+0x60>)
 8001080:	4a14      	ldr	r2, [pc, #80]	@ (80010d4 <MX_TIM6_Init+0x64>)
 8001082:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 90-1;
 8001084:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <MX_TIM6_Init+0x60>)
 8001086:	2259      	movs	r2, #89	@ 0x59
 8001088:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108a:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <MX_TIM6_Init+0x60>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8001090:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <MX_TIM6_Init+0x60>)
 8001092:	2263      	movs	r2, #99	@ 0x63
 8001094:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001096:	4b0e      	ldr	r3, [pc, #56]	@ (80010d0 <MX_TIM6_Init+0x60>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800109c:	480c      	ldr	r0, [pc, #48]	@ (80010d0 <MX_TIM6_Init+0x60>)
 800109e:	f002 fbfd 	bl	800389c <HAL_TIM_Base_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 80010a8:	f7ff fe68 	bl	8000d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ac:	2300      	movs	r3, #0
 80010ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80010b4:	463b      	mov	r3, r7
 80010b6:	4619      	mov	r1, r3
 80010b8:	4805      	ldr	r0, [pc, #20]	@ (80010d0 <MX_TIM6_Init+0x60>)
 80010ba:	f003 fc4d 	bl	8004958 <HAL_TIMEx_MasterConfigSynchronization>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 80010c4:	f7ff fe5a 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000118 	.word	0x20000118
 80010d4:	40001000 	.word	0x40001000

080010d8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ec:	463b      	mov	r3, r7
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80010f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001170 <MX_TIM8_Init+0x98>)
 80010f6:	4a1f      	ldr	r2, [pc, #124]	@ (8001174 <MX_TIM8_Init+0x9c>)
 80010f8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 80010fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001170 <MX_TIM8_Init+0x98>)
 80010fc:	22b3      	movs	r2, #179	@ 0xb3
 80010fe:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001100:	4b1b      	ldr	r3, [pc, #108]	@ (8001170 <MX_TIM8_Init+0x98>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8001106:	4b1a      	ldr	r3, [pc, #104]	@ (8001170 <MX_TIM8_Init+0x98>)
 8001108:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800110c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110e:	4b18      	ldr	r3, [pc, #96]	@ (8001170 <MX_TIM8_Init+0x98>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001114:	4b16      	ldr	r3, [pc, #88]	@ (8001170 <MX_TIM8_Init+0x98>)
 8001116:	2200      	movs	r2, #0
 8001118:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111a:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <MX_TIM8_Init+0x98>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001120:	4813      	ldr	r0, [pc, #76]	@ (8001170 <MX_TIM8_Init+0x98>)
 8001122:	f002 fbbb 	bl	800389c <HAL_TIM_Base_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 800112c:	f7ff fe26 	bl	8000d7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001130:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001134:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001136:	f107 0308 	add.w	r3, r7, #8
 800113a:	4619      	mov	r1, r3
 800113c:	480c      	ldr	r0, [pc, #48]	@ (8001170 <MX_TIM8_Init+0x98>)
 800113e:	f002 ff41 	bl	8003fc4 <HAL_TIM_ConfigClockSource>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001148:	f7ff fe18 	bl	8000d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800114c:	2320      	movs	r3, #32
 800114e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001154:	463b      	mov	r3, r7
 8001156:	4619      	mov	r1, r3
 8001158:	4805      	ldr	r0, [pc, #20]	@ (8001170 <MX_TIM8_Init+0x98>)
 800115a:	f003 fbfd 	bl	8004958 <HAL_TIMEx_MasterConfigSynchronization>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001164:	f7ff fe0a 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000160 	.word	0x20000160
 8001174:	40010400 	.word	0x40010400

08001178 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a36      	ldr	r2, [pc, #216]	@ (8001260 <HAL_TIM_Base_MspInit+0xe8>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d12e      	bne.n	80011e8 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	4b35      	ldr	r3, [pc, #212]	@ (8001264 <HAL_TIM_Base_MspInit+0xec>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001192:	4a34      	ldr	r2, [pc, #208]	@ (8001264 <HAL_TIM_Base_MspInit+0xec>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6453      	str	r3, [r2, #68]	@ 0x44
 800119a:	4b32      	ldr	r3, [pc, #200]	@ (8001264 <HAL_TIM_Base_MspInit+0xec>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	2018      	movs	r0, #24
 80011ac:	f001 f8a5 	bl	80022fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80011b0:	2018      	movs	r0, #24
 80011b2:	f001 f8be 	bl	8002332 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	2019      	movs	r0, #25
 80011bc:	f001 f89d 	bl	80022fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011c0:	2019      	movs	r0, #25
 80011c2:	f001 f8b6 	bl	8002332 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	201a      	movs	r0, #26
 80011cc:	f001 f895 	bl	80022fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80011d0:	201a      	movs	r0, #26
 80011d2:	f001 f8ae 	bl	8002332 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	201b      	movs	r0, #27
 80011dc:	f001 f88d 	bl	80022fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80011e0:	201b      	movs	r0, #27
 80011e2:	f001 f8a6 	bl	8002332 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80011e6:	e036      	b.n	8001256 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM6)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a1e      	ldr	r2, [pc, #120]	@ (8001268 <HAL_TIM_Base_MspInit+0xf0>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d116      	bne.n	8001220 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001264 <HAL_TIM_Base_MspInit+0xec>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001264 <HAL_TIM_Base_MspInit+0xec>)
 80011fc:	f043 0310 	orr.w	r3, r3, #16
 8001200:	6413      	str	r3, [r2, #64]	@ 0x40
 8001202:	4b18      	ldr	r3, [pc, #96]	@ (8001264 <HAL_TIM_Base_MspInit+0xec>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	f003 0310 	and.w	r3, r3, #16
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	2036      	movs	r0, #54	@ 0x36
 8001214:	f001 f871 	bl	80022fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001218:	2036      	movs	r0, #54	@ 0x36
 800121a:	f001 f88a 	bl	8002332 <HAL_NVIC_EnableIRQ>
}
 800121e:	e01a      	b.n	8001256 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM8)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a11      	ldr	r2, [pc, #68]	@ (800126c <HAL_TIM_Base_MspInit+0xf4>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d115      	bne.n	8001256 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	4b0d      	ldr	r3, [pc, #52]	@ (8001264 <HAL_TIM_Base_MspInit+0xec>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001232:	4a0c      	ldr	r2, [pc, #48]	@ (8001264 <HAL_TIM_Base_MspInit+0xec>)
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	6453      	str	r3, [r2, #68]	@ 0x44
 800123a:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <HAL_TIM_Base_MspInit+0xec>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	202c      	movs	r0, #44	@ 0x2c
 800124c:	f001 f855 	bl	80022fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001250:	202c      	movs	r0, #44	@ 0x2c
 8001252:	f001 f86e 	bl	8002332 <HAL_NVIC_EnableIRQ>
}
 8001256:	bf00      	nop
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40010000 	.word	0x40010000
 8001264:	40023800 	.word	0x40023800
 8001268:	40001000 	.word	0x40001000
 800126c:	40010400 	.word	0x40010400

08001270 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a12      	ldr	r2, [pc, #72]	@ (80012d8 <HAL_TIM_MspPostInit+0x68>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d11e      	bne.n	80012d0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <HAL_TIM_MspPostInit+0x6c>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a10      	ldr	r2, [pc, #64]	@ (80012dc <HAL_TIM_MspPostInit+0x6c>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b0e      	ldr	r3, [pc, #56]	@ (80012dc <HAL_TIM_MspPostInit+0x6c>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012c0:	2301      	movs	r3, #1
 80012c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	4619      	mov	r1, r3
 80012ca:	4805      	ldr	r0, [pc, #20]	@ (80012e0 <HAL_TIM_MspPostInit+0x70>)
 80012cc:	f001 fb36 	bl	800293c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80012d0:	bf00      	nop
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40010000 	.word	0x40010000
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020000 	.word	0x40020000

080012e4 <__NVIC_GetPriorityGrouping>:
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e8:	4b04      	ldr	r3, [pc, #16]	@ (80012fc <__NVIC_GetPriorityGrouping+0x18>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	0a1b      	lsrs	r3, r3, #8
 80012ee:	f003 0307 	and.w	r3, r3, #7
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_EnableIRQ>:
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	2b00      	cmp	r3, #0
 8001310:	db0b      	blt.n	800132a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	f003 021f 	and.w	r2, r3, #31
 8001318:	4907      	ldr	r1, [pc, #28]	@ (8001338 <__NVIC_EnableIRQ+0x38>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	095b      	lsrs	r3, r3, #5
 8001320:	2001      	movs	r0, #1
 8001322:	fa00 f202 	lsl.w	r2, r0, r2
 8001326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000e100 	.word	0xe000e100

0800133c <__NVIC_SetPriority>:
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	2b00      	cmp	r3, #0
 800134e:	db0a      	blt.n	8001366 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	b2da      	uxtb	r2, r3
 8001354:	490c      	ldr	r1, [pc, #48]	@ (8001388 <__NVIC_SetPriority+0x4c>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	0112      	lsls	r2, r2, #4
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	440b      	add	r3, r1
 8001360:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001364:	e00a      	b.n	800137c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4908      	ldr	r1, [pc, #32]	@ (800138c <__NVIC_SetPriority+0x50>)
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	3b04      	subs	r3, #4
 8001374:	0112      	lsls	r2, r2, #4
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	440b      	add	r3, r1
 800137a:	761a      	strb	r2, [r3, #24]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000e100 	.word	0xe000e100
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <NVIC_EncodePriority>:
{
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	@ 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f1c3 0307 	rsb	r3, r3, #7
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	bf28      	it	cs
 80013ae:	2304      	movcs	r3, #4
 80013b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3304      	adds	r3, #4
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	d902      	bls.n	80013c0 <NVIC_EncodePriority+0x30>
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3b03      	subs	r3, #3
 80013be:	e000      	b.n	80013c2 <NVIC_EncodePriority+0x32>
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	f04f 32ff 	mov.w	r2, #4294967295
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43da      	mvns	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	401a      	ands	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	43d9      	mvns	r1, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	4313      	orrs	r3, r2
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3724      	adds	r7, #36	@ 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	60da      	str	r2, [r3, #12]
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <LL_USART_ConfigHalfDuplexMode>:
  *         CR3          IREN          LL_USART_ConfigHalfDuplexMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigHalfDuplexMode(USART_TypeDef *USARTx)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  /* In Half Duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	f023 0222 	bic.w	r2, r3, #34	@ 0x22
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	615a      	str	r2, [r3, #20]
  /* set the UART/USART in Half Duplex mode */
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	f043 0208 	orr.w	r2, r3, #8
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	615a      	str	r2, [r3, #20]
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
	...

08001450 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001458:	4b08      	ldr	r3, [pc, #32]	@ (800147c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800145a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800145c:	4907      	ldr	r1, [pc, #28]	@ (800147c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4313      	orrs	r3, r2
 8001462:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001464:	4b05      	ldr	r3, [pc, #20]	@ (800147c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001466:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4013      	ands	r3, r2
 800146c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800146e:	68fb      	ldr	r3, [r7, #12]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	40023800 	.word	0x40023800

08001480 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001488:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800148a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800148c:	4907      	ldr	r1, [pc, #28]	@ (80014ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4313      	orrs	r3, r2
 8001492:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001494:	4b05      	ldr	r3, [pc, #20]	@ (80014ac <LL_APB2_GRP1_EnableClock+0x2c>)
 8001496:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4013      	ands	r3, r2
 800149c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800149e:	68fb      	ldr	r3, [r7, #12]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	40023800 	.word	0x40023800

080014b0 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80014bc:	4a0d      	ldr	r2, [pc, #52]	@ (80014f4 <LL_DMA_SetDataTransferDirection+0x44>)
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	4413      	add	r3, r2
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	4413      	add	r3, r2
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80014d0:	4908      	ldr	r1, [pc, #32]	@ (80014f4 <LL_DMA_SetDataTransferDirection+0x44>)
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	440b      	add	r3, r1
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4619      	mov	r1, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	440b      	add	r3, r1
 80014de:	4619      	mov	r1, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]
}
 80014e6:	bf00      	nop
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	08005840 	.word	0x08005840

080014f8 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8001504:	4a0d      	ldr	r2, [pc, #52]	@ (800153c <LL_DMA_SetMode+0x44>)
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	4413      	add	r3, r2
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4413      	add	r3, r2
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8001518:	4908      	ldr	r1, [pc, #32]	@ (800153c <LL_DMA_SetMode+0x44>)
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	440b      	add	r3, r1
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	440b      	add	r3, r1
 8001526:	4619      	mov	r1, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4313      	orrs	r3, r2
 800152c:	600b      	str	r3, [r1, #0]
}
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	08005840 	.word	0x08005840

08001540 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 800154c:	4a0d      	ldr	r2, [pc, #52]	@ (8001584 <LL_DMA_SetPeriphIncMode+0x44>)
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	4413      	add	r3, r2
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	4413      	add	r3, r2
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8001560:	4908      	ldr	r1, [pc, #32]	@ (8001584 <LL_DMA_SetPeriphIncMode+0x44>)
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	440b      	add	r3, r1
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	440b      	add	r3, r1
 800156e:	4619      	mov	r1, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4313      	orrs	r3, r2
 8001574:	600b      	str	r3, [r1, #0]
}
 8001576:	bf00      	nop
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	08005840 	.word	0x08005840

08001588 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8001594:	4a0d      	ldr	r2, [pc, #52]	@ (80015cc <LL_DMA_SetMemoryIncMode+0x44>)
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	4413      	add	r3, r2
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4413      	add	r3, r2
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80015a8:	4908      	ldr	r1, [pc, #32]	@ (80015cc <LL_DMA_SetMemoryIncMode+0x44>)
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	440b      	add	r3, r1
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	4619      	mov	r1, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	440b      	add	r3, r1
 80015b6:	4619      	mov	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	600b      	str	r3, [r1, #0]
}
 80015be:	bf00      	nop
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	08005840 	.word	0x08005840

080015d0 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80015dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001614 <LL_DMA_SetPeriphSize+0x44>)
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	4413      	add	r3, r2
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4413      	add	r3, r2
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80015f0:	4908      	ldr	r1, [pc, #32]	@ (8001614 <LL_DMA_SetPeriphSize+0x44>)
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	440b      	add	r3, r1
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4619      	mov	r1, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	440b      	add	r3, r1
 80015fe:	4619      	mov	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4313      	orrs	r3, r2
 8001604:	600b      	str	r3, [r1, #0]
}
 8001606:	bf00      	nop
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	08005840 	.word	0x08005840

08001618 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8001624:	4a0d      	ldr	r2, [pc, #52]	@ (800165c <LL_DMA_SetMemorySize+0x44>)
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	4413      	add	r3, r2
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4413      	add	r3, r2
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8001638:	4908      	ldr	r1, [pc, #32]	@ (800165c <LL_DMA_SetMemorySize+0x44>)
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	440b      	add	r3, r1
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4619      	mov	r1, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	440b      	add	r3, r1
 8001646:	4619      	mov	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4313      	orrs	r3, r2
 800164c:	600b      	str	r3, [r1, #0]
}
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	08005840 	.word	0x08005840

08001660 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 800166c:	4a0d      	ldr	r2, [pc, #52]	@ (80016a4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	4413      	add	r3, r2
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4413      	add	r3, r2
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001680:	4908      	ldr	r1, [pc, #32]	@ (80016a4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	440b      	add	r3, r1
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	4619      	mov	r1, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	440b      	add	r3, r1
 800168e:	4619      	mov	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]
}
 8001696:	bf00      	nop
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	08005840 	.word	0x08005840

080016a8 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80016b4:	4a0d      	ldr	r2, [pc, #52]	@ (80016ec <LL_DMA_SetChannelSelection+0x44>)
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	4413      	add	r3, r2
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4413      	add	r3, r2
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80016c8:	4908      	ldr	r1, [pc, #32]	@ (80016ec <LL_DMA_SetChannelSelection+0x44>)
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	440b      	add	r3, r1
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4619      	mov	r1, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	440b      	add	r3, r1
 80016d6:	4619      	mov	r1, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4313      	orrs	r3, r2
 80016dc:	600b      	str	r3, [r1, #0]
}
 80016de:	bf00      	nop
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	08005840 	.word	0x08005840

080016f0 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 80016fa:	4a0c      	ldr	r2, [pc, #48]	@ (800172c <LL_DMA_DisableFifoMode+0x3c>)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4413      	add	r3, r2
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	4908      	ldr	r1, [pc, #32]	@ (800172c <LL_DMA_DisableFifoMode+0x3c>)
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	440a      	add	r2, r1
 8001710:	7812      	ldrb	r2, [r2, #0]
 8001712:	4611      	mov	r1, r2
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	440a      	add	r2, r1
 8001718:	f023 0304 	bic.w	r3, r3, #4
 800171c:	6153      	str	r3, [r2, #20]
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	08005840 	.word	0x08005840

08001730 <MX_USART6_UART_Init>:
/* USER CODE END 0 */

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08e      	sub	sp, #56	@ 0x38
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001736:	f107 031c 	add.w	r3, r7, #28
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
 8001744:	611a      	str	r2, [r3, #16]
 8001746:	615a      	str	r2, [r3, #20]
 8001748:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
 8001758:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 800175a:	2020      	movs	r0, #32
 800175c:	f7ff fe90 	bl	8001480 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001760:	2004      	movs	r0, #4
 8001762:	f7ff fe75 	bl	8001450 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001766:	2340      	movs	r3, #64	@ 0x40
 8001768:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800176a:	2302      	movs	r3, #2
 800176c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800176e:	2303      	movs	r3, #3
 8001770:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001772:	2301      	movs	r3, #1
 8001774:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800177a:	2308      	movs	r3, #8
 800177c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	4619      	mov	r1, r3
 8001782:	4838      	ldr	r0, [pc, #224]	@ (8001864 <MX_USART6_UART_Init+0x134>)
 8001784:	f003 fb3a 	bl	8004dfc <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8001788:	2380      	movs	r3, #128	@ 0x80
 800178a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800178c:	2302      	movs	r3, #2
 800178e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001790:	2303      	movs	r3, #3
 8001792:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800179c:	2308      	movs	r3, #8
 800179e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	4619      	mov	r1, r3
 80017a4:	482f      	ldr	r0, [pc, #188]	@ (8001864 <MX_USART6_UART_Init+0x134>)
 80017a6:	f003 fb29 	bl	8004dfc <LL_GPIO_Init>

  /* USART6 DMA Init */

  /* USART6_RX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_1, LL_DMA_CHANNEL_5);
 80017aa:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80017ae:	2101      	movs	r1, #1
 80017b0:	482d      	ldr	r0, [pc, #180]	@ (8001868 <MX_USART6_UART_Init+0x138>)
 80017b2:	f7ff ff79 	bl	80016a8 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2101      	movs	r1, #1
 80017ba:	482b      	ldr	r0, [pc, #172]	@ (8001868 <MX_USART6_UART_Init+0x138>)
 80017bc:	f7ff fe78 	bl	80014b0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_1, LL_DMA_PRIORITY_LOW);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2101      	movs	r1, #1
 80017c4:	4828      	ldr	r0, [pc, #160]	@ (8001868 <MX_USART6_UART_Init+0x138>)
 80017c6:	f7ff ff4b 	bl	8001660 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_1, LL_DMA_MODE_CIRCULAR);
 80017ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017ce:	2101      	movs	r1, #1
 80017d0:	4825      	ldr	r0, [pc, #148]	@ (8001868 <MX_USART6_UART_Init+0x138>)
 80017d2:	f7ff fe91 	bl	80014f8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2101      	movs	r1, #1
 80017da:	4823      	ldr	r0, [pc, #140]	@ (8001868 <MX_USART6_UART_Init+0x138>)
 80017dc:	f7ff feb0 	bl	8001540 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 80017e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017e4:	2101      	movs	r1, #1
 80017e6:	4820      	ldr	r0, [pc, #128]	@ (8001868 <MX_USART6_UART_Init+0x138>)
 80017e8:	f7ff fece 	bl	8001588 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_BYTE);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2101      	movs	r1, #1
 80017f0:	481d      	ldr	r0, [pc, #116]	@ (8001868 <MX_USART6_UART_Init+0x138>)
 80017f2:	f7ff feed 	bl	80015d0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_BYTE);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2101      	movs	r1, #1
 80017fa:	481b      	ldr	r0, [pc, #108]	@ (8001868 <MX_USART6_UART_Init+0x138>)
 80017fc:	f7ff ff0c 	bl	8001618 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_1);
 8001800:	2101      	movs	r1, #1
 8001802:	4819      	ldr	r0, [pc, #100]	@ (8001868 <MX_USART6_UART_Init+0x138>)
 8001804:	f7ff ff74 	bl	80016f0 <LL_DMA_DisableFifoMode>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001808:	f7ff fd6c 	bl	80012e4 <__NVIC_GetPriorityGrouping>
 800180c:	4603      	mov	r3, r0
 800180e:	2200      	movs	r2, #0
 8001810:	2100      	movs	r1, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fdbc 	bl	8001390 <NVIC_EncodePriority>
 8001818:	4603      	mov	r3, r0
 800181a:	4619      	mov	r1, r3
 800181c:	2047      	movs	r0, #71	@ 0x47
 800181e:	f7ff fd8d 	bl	800133c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8001822:	2047      	movs	r0, #71	@ 0x47
 8001824:	f7ff fd6c 	bl	8001300 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001828:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800182c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001832:	2300      	movs	r3, #0
 8001834:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001836:	2300      	movs	r3, #0
 8001838:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800183a:	230c      	movs	r3, #12
 800183c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800183e:	2300      	movs	r3, #0
 8001840:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8001842:	f107 031c 	add.w	r3, r7, #28
 8001846:	4619      	mov	r1, r3
 8001848:	4808      	ldr	r0, [pc, #32]	@ (800186c <MX_USART6_UART_Init+0x13c>)
 800184a:	f003 ff35 	bl	80056b8 <LL_USART_Init>
  LL_USART_Enable(USART6);
 800184e:	4807      	ldr	r0, [pc, #28]	@ (800186c <MX_USART6_UART_Init+0x13c>)
 8001850:	f7ff fdd1 	bl	80013f6 <LL_USART_Enable>
  LL_USART_ConfigHalfDuplexMode(USART6);
 8001854:	4805      	ldr	r0, [pc, #20]	@ (800186c <MX_USART6_UART_Init+0x13c>)
 8001856:	f7ff fdde 	bl	8001416 <LL_USART_ConfigHalfDuplexMode>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	3738      	adds	r7, #56	@ 0x38
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40020800 	.word	0x40020800
 8001868:	40026400 	.word	0x40026400
 800186c:	40011400 	.word	0x40011400

08001870 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001870:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001874:	f7ff fb3e 	bl	8000ef4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001878:	480c      	ldr	r0, [pc, #48]	@ (80018ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800187a:	490d      	ldr	r1, [pc, #52]	@ (80018b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800187c:	4a0d      	ldr	r2, [pc, #52]	@ (80018b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001880:	e002      	b.n	8001888 <LoopCopyDataInit>

08001882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001886:	3304      	adds	r3, #4

08001888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800188c:	d3f9      	bcc.n	8001882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188e:	4a0a      	ldr	r2, [pc, #40]	@ (80018b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001890:	4c0a      	ldr	r4, [pc, #40]	@ (80018bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001894:	e001      	b.n	800189a <LoopFillZerobss>

08001896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001898:	3204      	adds	r2, #4

0800189a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800189c:	d3fb      	bcc.n	8001896 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800189e:	f003 ff93 	bl	80057c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018a2:	f7ff f999 	bl	8000bd8 <main>
  bx  lr    
 80018a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80018b4:	08005860 	.word	0x08005860
  ldr r2, =_sbss
 80018b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80018bc:	200001ac 	.word	0x200001ac

080018c0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c0:	e7fe      	b.n	80018c0 <CAN1_RX0_IRQHandler>
	...

080018c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <HAL_Init+0x40>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001904 <HAL_Init+0x40>)
 80018ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <HAL_Init+0x40>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001904 <HAL_Init+0x40>)
 80018da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e0:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <HAL_Init+0x40>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a07      	ldr	r2, [pc, #28]	@ (8001904 <HAL_Init+0x40>)
 80018e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ec:	2003      	movs	r0, #3
 80018ee:	f000 fcf9 	bl	80022e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018f2:	200f      	movs	r0, #15
 80018f4:	f000 f808 	bl	8001908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f8:	f7ff fa46 	bl	8000d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023c00 	.word	0x40023c00

08001908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001910:	4b12      	ldr	r3, [pc, #72]	@ (800195c <HAL_InitTick+0x54>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <HAL_InitTick+0x58>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	4619      	mov	r1, r3
 800191a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800191e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001922:	fbb2 f3f3 	udiv	r3, r2, r3
 8001926:	4618      	mov	r0, r3
 8001928:	f000 fd11 	bl	800234e <HAL_SYSTICK_Config>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e00e      	b.n	8001954 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b0f      	cmp	r3, #15
 800193a:	d80a      	bhi.n	8001952 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800193c:	2200      	movs	r2, #0
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	f04f 30ff 	mov.w	r0, #4294967295
 8001944:	f000 fcd9 	bl	80022fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001948:	4a06      	ldr	r2, [pc, #24]	@ (8001964 <HAL_InitTick+0x5c>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
 8001950:	e000      	b.n	8001954 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
}
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000000 	.word	0x20000000
 8001960:	20000008 	.word	0x20000008
 8001964:	20000004 	.word	0x20000004

08001968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <HAL_IncTick+0x20>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4b06      	ldr	r3, [pc, #24]	@ (800198c <HAL_IncTick+0x24>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4413      	add	r3, r2
 8001978:	4a04      	ldr	r2, [pc, #16]	@ (800198c <HAL_IncTick+0x24>)
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000008 	.word	0x20000008
 800198c:	200001a8 	.word	0x200001a8

08001990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return uwTick;
 8001994:	4b03      	ldr	r3, [pc, #12]	@ (80019a4 <HAL_GetTick+0x14>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	200001a8 	.word	0x200001a8

080019a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b0:	f7ff ffee 	bl	8001990 <HAL_GetTick>
 80019b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c0:	d005      	beq.n	80019ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019c2:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <HAL_Delay+0x44>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ce:	bf00      	nop
 80019d0:	f7ff ffde 	bl	8001990 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d8f7      	bhi.n	80019d0 <HAL_Delay+0x28>
  {
  }
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000008 	.word	0x20000008

080019f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e033      	b.n	8001a6e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d109      	bne.n	8001a22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7fe fe96 	bl	8000740 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a26:	f003 0310 	and.w	r3, r3, #16
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d118      	bne.n	8001a60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a32:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a36:	f023 0302 	bic.w	r3, r3, #2
 8001a3a:	f043 0202 	orr.w	r2, r3, #2
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 fa78 	bl	8001f38 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a52:	f023 0303 	bic.w	r3, r3, #3
 8001a56:	f043 0201 	orr.w	r2, r3, #1
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a5e:	e001      	b.n	8001a64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	f003 0320 	and.w	r3, r3, #32
 8001aa4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d049      	beq.n	8001b40 <HAL_ADC_IRQHandler+0xca>
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d046      	beq.n	8001b40 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	f003 0310 	and.w	r3, r3, #16
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d105      	bne.n	8001aca <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d12b      	bne.n	8001b30 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d127      	bne.n	8001b30 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d006      	beq.n	8001afc <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d119      	bne.n	8001b30 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0220 	bic.w	r2, r2, #32
 8001b0a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d105      	bne.n	8001b30 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b28:	f043 0201 	orr.w	r2, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f8b0 	bl	8001c96 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f06f 0212 	mvn.w	r2, #18
 8001b3e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b4e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d057      	beq.n	8001c06 <HAL_ADC_IRQHandler+0x190>
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d054      	beq.n	8001c06 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b60:	f003 0310 	and.w	r3, r3, #16
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d105      	bne.n	8001b74 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d139      	bne.n	8001bf6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b88:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d006      	beq.n	8001b9e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d12b      	bne.n	8001bf6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d124      	bne.n	8001bf6 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d11d      	bne.n	8001bf6 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d119      	bne.n	8001bf6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001bd0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d105      	bne.n	8001bf6 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bee:	f043 0201 	orr.w	r2, r3, #1
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 fa9a 	bl	8002130 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f06f 020c 	mvn.w	r2, #12
 8001c04:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c14:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d017      	beq.n	8001c4c <HAL_ADC_IRQHandler+0x1d6>
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d014      	beq.n	8001c4c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d10d      	bne.n	8001c4c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c34:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f834 	bl	8001caa <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f06f 0201 	mvn.w	r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f003 0320 	and.w	r3, r3, #32
 8001c52:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c5a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d015      	beq.n	8001c8e <HAL_ADC_IRQHandler+0x218>
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d012      	beq.n	8001c8e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6c:	f043 0202 	orr.w	r2, r3, #2
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f06f 0220 	mvn.w	r2, #32
 8001c7c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f81d 	bl	8001cbe <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f06f 0220 	mvn.w	r2, #32
 8001c8c:	601a      	str	r2, [r3, #0]
  }
}
 8001c8e:	bf00      	nop
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x1c>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e113      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x244>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b09      	cmp	r3, #9
 8001cfe:	d925      	bls.n	8001d4c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68d9      	ldr	r1, [r3, #12]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	3b1e      	subs	r3, #30
 8001d16:	2207      	movs	r2, #7
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43da      	mvns	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	400a      	ands	r2, r1
 8001d24:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68d9      	ldr	r1, [r3, #12]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	4618      	mov	r0, r3
 8001d38:	4603      	mov	r3, r0
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	4403      	add	r3, r0
 8001d3e:	3b1e      	subs	r3, #30
 8001d40:	409a      	lsls	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	e022      	b.n	8001d92 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6919      	ldr	r1, [r3, #16]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4413      	add	r3, r2
 8001d60:	2207      	movs	r2, #7
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	400a      	ands	r2, r1
 8001d6e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6919      	ldr	r1, [r3, #16]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	4618      	mov	r0, r3
 8001d82:	4603      	mov	r3, r0
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4403      	add	r3, r0
 8001d88:	409a      	lsls	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d824      	bhi.n	8001de4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	3b05      	subs	r3, #5
 8001dac:	221f      	movs	r2, #31
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43da      	mvns	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	400a      	ands	r2, r1
 8001dba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	4618      	mov	r0, r3
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3b05      	subs	r3, #5
 8001dd6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001de2:	e04c      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b0c      	cmp	r3, #12
 8001dea:	d824      	bhi.n	8001e36 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3b23      	subs	r3, #35	@ 0x23
 8001dfe:	221f      	movs	r2, #31
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43da      	mvns	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	400a      	ands	r2, r1
 8001e0c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	3b23      	subs	r3, #35	@ 0x23
 8001e28:	fa00 f203 	lsl.w	r2, r0, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e34:	e023      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	3b41      	subs	r3, #65	@ 0x41
 8001e48:	221f      	movs	r2, #31
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	400a      	ands	r2, r1
 8001e56:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	4618      	mov	r0, r3
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	3b41      	subs	r3, #65	@ 0x41
 8001e72:	fa00 f203 	lsl.w	r2, r0, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e7e:	4b29      	ldr	r3, [pc, #164]	@ (8001f24 <HAL_ADC_ConfigChannel+0x250>)
 8001e80:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a28      	ldr	r2, [pc, #160]	@ (8001f28 <HAL_ADC_ConfigChannel+0x254>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d10f      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x1d8>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b12      	cmp	r3, #18
 8001e92:	d10b      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8001f28 <HAL_ADC_ConfigChannel+0x254>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d12b      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x23a>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a1c      	ldr	r2, [pc, #112]	@ (8001f2c <HAL_ADC_ConfigChannel+0x258>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d003      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0x1f4>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b11      	cmp	r3, #17
 8001ec6:	d122      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a11      	ldr	r2, [pc, #68]	@ (8001f2c <HAL_ADC_ConfigChannel+0x258>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d111      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eea:	4b11      	ldr	r3, [pc, #68]	@ (8001f30 <HAL_ADC_ConfigChannel+0x25c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a11      	ldr	r2, [pc, #68]	@ (8001f34 <HAL_ADC_ConfigChannel+0x260>)
 8001ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef4:	0c9a      	lsrs	r2, r3, #18
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f00:	e002      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	3b01      	subs	r3, #1
 8001f06:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f9      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	40012300 	.word	0x40012300
 8001f28:	40012000 	.word	0x40012000
 8001f2c:	10000012 	.word	0x10000012
 8001f30:	20000000 	.word	0x20000000
 8001f34:	431bde83 	.word	0x431bde83

08001f38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f40:	4b79      	ldr	r3, [pc, #484]	@ (8002128 <ADC_Init+0x1f0>)
 8001f42:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6859      	ldr	r1, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	021a      	lsls	r2, r3, #8
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001f90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6859      	ldr	r1, [r3, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6899      	ldr	r1, [r3, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fca:	4a58      	ldr	r2, [pc, #352]	@ (800212c <ADC_Init+0x1f4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d022      	beq.n	8002016 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6899      	ldr	r1, [r3, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002000:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6899      	ldr	r1, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	e00f      	b.n	8002036 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002024:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002034:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0202 	bic.w	r2, r2, #2
 8002044:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6899      	ldr	r1, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	7e1b      	ldrb	r3, [r3, #24]
 8002050:	005a      	lsls	r2, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d01b      	beq.n	800209c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002072:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002082:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6859      	ldr	r1, [r3, #4]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208e:	3b01      	subs	r3, #1
 8002090:	035a      	lsls	r2, r3, #13
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	e007      	b.n	80020ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020aa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80020ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	051a      	lsls	r2, r3, #20
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80020e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6899      	ldr	r1, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80020ee:	025a      	lsls	r2, r3, #9
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002106:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6899      	ldr	r1, [r3, #8]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	029a      	lsls	r2, r3, #10
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	609a      	str	r2, [r3, #8]
}
 800211c:	bf00      	nop
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	40012300 	.word	0x40012300
 800212c:	0f000001 	.word	0x0f000001

08002130 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <__NVIC_SetPriorityGrouping>:
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002154:	4b0c      	ldr	r3, [pc, #48]	@ (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002160:	4013      	ands	r3, r2
 8002162:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800216c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002176:	4a04      	ldr	r2, [pc, #16]	@ (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	60d3      	str	r3, [r2, #12]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <__NVIC_GetPriorityGrouping>:
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002190:	4b04      	ldr	r3, [pc, #16]	@ (80021a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	f003 0307 	and.w	r3, r3, #7
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <__NVIC_EnableIRQ>:
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	db0b      	blt.n	80021d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	f003 021f 	and.w	r2, r3, #31
 80021c0:	4907      	ldr	r1, [pc, #28]	@ (80021e0 <__NVIC_EnableIRQ+0x38>)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	095b      	lsrs	r3, r3, #5
 80021c8:	2001      	movs	r0, #1
 80021ca:	fa00 f202 	lsl.w	r2, r0, r2
 80021ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000e100 	.word	0xe000e100

080021e4 <__NVIC_SetPriority>:
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	6039      	str	r1, [r7, #0]
 80021ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	db0a      	blt.n	800220e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	490c      	ldr	r1, [pc, #48]	@ (8002230 <__NVIC_SetPriority+0x4c>)
 80021fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002202:	0112      	lsls	r2, r2, #4
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	440b      	add	r3, r1
 8002208:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800220c:	e00a      	b.n	8002224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4908      	ldr	r1, [pc, #32]	@ (8002234 <__NVIC_SetPriority+0x50>)
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	3b04      	subs	r3, #4
 800221c:	0112      	lsls	r2, r2, #4
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	440b      	add	r3, r1
 8002222:	761a      	strb	r2, [r3, #24]
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000e100 	.word	0xe000e100
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <NVIC_EncodePriority>:
{
 8002238:	b480      	push	{r7}
 800223a:	b089      	sub	sp, #36	@ 0x24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f1c3 0307 	rsb	r3, r3, #7
 8002252:	2b04      	cmp	r3, #4
 8002254:	bf28      	it	cs
 8002256:	2304      	movcs	r3, #4
 8002258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3304      	adds	r3, #4
 800225e:	2b06      	cmp	r3, #6
 8002260:	d902      	bls.n	8002268 <NVIC_EncodePriority+0x30>
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3b03      	subs	r3, #3
 8002266:	e000      	b.n	800226a <NVIC_EncodePriority+0x32>
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800226c:	f04f 32ff 	mov.w	r2, #4294967295
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43da      	mvns	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	401a      	ands	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002280:	f04f 31ff 	mov.w	r1, #4294967295
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	fa01 f303 	lsl.w	r3, r1, r3
 800228a:	43d9      	mvns	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002290:	4313      	orrs	r3, r2
}
 8002292:	4618      	mov	r0, r3
 8002294:	3724      	adds	r7, #36	@ 0x24
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022b0:	d301      	bcc.n	80022b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022b2:	2301      	movs	r3, #1
 80022b4:	e00f      	b.n	80022d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b6:	4a0a      	ldr	r2, [pc, #40]	@ (80022e0 <SysTick_Config+0x40>)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022be:	210f      	movs	r1, #15
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295
 80022c4:	f7ff ff8e 	bl	80021e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c8:	4b05      	ldr	r3, [pc, #20]	@ (80022e0 <SysTick_Config+0x40>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ce:	4b04      	ldr	r3, [pc, #16]	@ (80022e0 <SysTick_Config+0x40>)
 80022d0:	2207      	movs	r2, #7
 80022d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	e000e010 	.word	0xe000e010

080022e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff ff29 	bl	8002144 <__NVIC_SetPriorityGrouping>
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b086      	sub	sp, #24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	4603      	mov	r3, r0
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
 8002306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800230c:	f7ff ff3e 	bl	800218c <__NVIC_GetPriorityGrouping>
 8002310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	6978      	ldr	r0, [r7, #20]
 8002318:	f7ff ff8e 	bl	8002238 <NVIC_EncodePriority>
 800231c:	4602      	mov	r2, r0
 800231e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002322:	4611      	mov	r1, r2
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff5d 	bl	80021e4 <__NVIC_SetPriority>
}
 800232a:	bf00      	nop
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	4603      	mov	r3, r0
 800233a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800233c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff ff31 	bl	80021a8 <__NVIC_EnableIRQ>
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff ffa2 	bl	80022a0 <SysTick_Config>
 800235c:	4603      	mov	r3, r0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002374:	f7ff fb0c 	bl	8001990 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e099      	b.n	80024b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0201 	bic.w	r2, r2, #1
 80023a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023a4:	e00f      	b.n	80023c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023a6:	f7ff faf3 	bl	8001990 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b05      	cmp	r3, #5
 80023b2:	d908      	bls.n	80023c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2220      	movs	r2, #32
 80023b8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2203      	movs	r2, #3
 80023be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e078      	b.n	80024b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1e8      	bne.n	80023a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	4b38      	ldr	r3, [pc, #224]	@ (80024c0 <HAL_DMA_Init+0x158>)
 80023e0:	4013      	ands	r3, r2
 80023e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800240a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	4313      	orrs	r3, r2
 8002416:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241c:	2b04      	cmp	r3, #4
 800241e:	d107      	bne.n	8002430 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002428:	4313      	orrs	r3, r2
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	4313      	orrs	r3, r2
 800242e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f023 0307 	bic.w	r3, r3, #7
 8002446:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	4313      	orrs	r3, r2
 8002450:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002456:	2b04      	cmp	r3, #4
 8002458:	d117      	bne.n	800248a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	4313      	orrs	r3, r2
 8002462:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00e      	beq.n	800248a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 f9e9 	bl	8002844 <DMA_CheckFifoParam>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d008      	beq.n	800248a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2240      	movs	r2, #64	@ 0x40
 800247c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002486:	2301      	movs	r3, #1
 8002488:	e016      	b.n	80024b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f9a0 	bl	80027d8 <DMA_CalcBaseAndBitshift>
 8002498:	4603      	mov	r3, r0
 800249a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a0:	223f      	movs	r2, #63	@ 0x3f
 80024a2:	409a      	lsls	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	f010803f 	.word	0xf010803f

080024c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024d0:	4b8e      	ldr	r3, [pc, #568]	@ (800270c <HAL_DMA_IRQHandler+0x248>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a8e      	ldr	r2, [pc, #568]	@ (8002710 <HAL_DMA_IRQHandler+0x24c>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	0a9b      	lsrs	r3, r3, #10
 80024dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ee:	2208      	movs	r2, #8
 80024f0:	409a      	lsls	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4013      	ands	r3, r2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d01a      	beq.n	8002530 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	d013      	beq.n	8002530 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0204 	bic.w	r2, r2, #4
 8002516:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800251c:	2208      	movs	r2, #8
 800251e:	409a      	lsls	r2, r3
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002528:	f043 0201 	orr.w	r2, r3, #1
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002534:	2201      	movs	r2, #1
 8002536:	409a      	lsls	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4013      	ands	r3, r2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d012      	beq.n	8002566 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00b      	beq.n	8002566 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002552:	2201      	movs	r2, #1
 8002554:	409a      	lsls	r2, r3
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800255e:	f043 0202 	orr.w	r2, r3, #2
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800256a:	2204      	movs	r2, #4
 800256c:	409a      	lsls	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4013      	ands	r3, r2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d012      	beq.n	800259c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00b      	beq.n	800259c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002588:	2204      	movs	r2, #4
 800258a:	409a      	lsls	r2, r3
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002594:	f043 0204 	orr.w	r2, r3, #4
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a0:	2210      	movs	r2, #16
 80025a2:	409a      	lsls	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d043      	beq.n	8002634 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d03c      	beq.n	8002634 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025be:	2210      	movs	r2, #16
 80025c0:	409a      	lsls	r2, r3
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d018      	beq.n	8002606 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d108      	bne.n	80025f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d024      	beq.n	8002634 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	4798      	blx	r3
 80025f2:	e01f      	b.n	8002634 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d01b      	beq.n	8002634 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	4798      	blx	r3
 8002604:	e016      	b.n	8002634 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002610:	2b00      	cmp	r3, #0
 8002612:	d107      	bne.n	8002624 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0208 	bic.w	r2, r2, #8
 8002622:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002638:	2220      	movs	r2, #32
 800263a:	409a      	lsls	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4013      	ands	r3, r2
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 808f 	beq.w	8002764 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 8087 	beq.w	8002764 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800265a:	2220      	movs	r2, #32
 800265c:	409a      	lsls	r2, r3
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b05      	cmp	r3, #5
 800266c:	d136      	bne.n	80026dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0216 	bic.w	r2, r2, #22
 800267c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695a      	ldr	r2, [r3, #20]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800268c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	d103      	bne.n	800269e <HAL_DMA_IRQHandler+0x1da>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800269a:	2b00      	cmp	r3, #0
 800269c:	d007      	beq.n	80026ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0208 	bic.w	r2, r2, #8
 80026ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b2:	223f      	movs	r2, #63	@ 0x3f
 80026b4:	409a      	lsls	r2, r3
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d07e      	beq.n	80027d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	4798      	blx	r3
        }
        return;
 80026da:	e079      	b.n	80027d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d01d      	beq.n	8002726 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10d      	bne.n	8002714 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d031      	beq.n	8002764 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	4798      	blx	r3
 8002708:	e02c      	b.n	8002764 <HAL_DMA_IRQHandler+0x2a0>
 800270a:	bf00      	nop
 800270c:	20000000 	.word	0x20000000
 8002710:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002718:	2b00      	cmp	r3, #0
 800271a:	d023      	beq.n	8002764 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	4798      	blx	r3
 8002724:	e01e      	b.n	8002764 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10f      	bne.n	8002754 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0210 	bic.w	r2, r2, #16
 8002742:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002768:	2b00      	cmp	r3, #0
 800276a:	d032      	beq.n	80027d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d022      	beq.n	80027be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2205      	movs	r2, #5
 800277c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0201 	bic.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	3301      	adds	r3, #1
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	429a      	cmp	r2, r3
 800279a:	d307      	bcc.n	80027ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f2      	bne.n	8002790 <HAL_DMA_IRQHandler+0x2cc>
 80027aa:	e000      	b.n	80027ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80027ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d005      	beq.n	80027d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	4798      	blx	r3
 80027ce:	e000      	b.n	80027d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80027d0:	bf00      	nop
    }
  }
}
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	3b10      	subs	r3, #16
 80027e8:	4a14      	ldr	r2, [pc, #80]	@ (800283c <DMA_CalcBaseAndBitshift+0x64>)
 80027ea:	fba2 2303 	umull	r2, r3, r2, r3
 80027ee:	091b      	lsrs	r3, r3, #4
 80027f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027f2:	4a13      	ldr	r2, [pc, #76]	@ (8002840 <DMA_CalcBaseAndBitshift+0x68>)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4413      	add	r3, r2
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2b03      	cmp	r3, #3
 8002804:	d909      	bls.n	800281a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800280e:	f023 0303 	bic.w	r3, r3, #3
 8002812:	1d1a      	adds	r2, r3, #4
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	659a      	str	r2, [r3, #88]	@ 0x58
 8002818:	e007      	b.n	800282a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002822:	f023 0303 	bic.w	r3, r3, #3
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800282e:	4618      	mov	r0, r3
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	aaaaaaab 	.word	0xaaaaaaab
 8002840:	08005848 	.word	0x08005848

08002844 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800284c:	2300      	movs	r3, #0
 800284e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002854:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d11f      	bne.n	800289e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2b03      	cmp	r3, #3
 8002862:	d856      	bhi.n	8002912 <DMA_CheckFifoParam+0xce>
 8002864:	a201      	add	r2, pc, #4	@ (adr r2, 800286c <DMA_CheckFifoParam+0x28>)
 8002866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286a:	bf00      	nop
 800286c:	0800287d 	.word	0x0800287d
 8002870:	0800288f 	.word	0x0800288f
 8002874:	0800287d 	.word	0x0800287d
 8002878:	08002913 	.word	0x08002913
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002880:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d046      	beq.n	8002916 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800288c:	e043      	b.n	8002916 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002892:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002896:	d140      	bne.n	800291a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800289c:	e03d      	b.n	800291a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028a6:	d121      	bne.n	80028ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d837      	bhi.n	800291e <DMA_CheckFifoParam+0xda>
 80028ae:	a201      	add	r2, pc, #4	@ (adr r2, 80028b4 <DMA_CheckFifoParam+0x70>)
 80028b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b4:	080028c5 	.word	0x080028c5
 80028b8:	080028cb 	.word	0x080028cb
 80028bc:	080028c5 	.word	0x080028c5
 80028c0:	080028dd 	.word	0x080028dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	73fb      	strb	r3, [r7, #15]
      break;
 80028c8:	e030      	b.n	800292c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d025      	beq.n	8002922 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028da:	e022      	b.n	8002922 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80028e4:	d11f      	bne.n	8002926 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028ea:	e01c      	b.n	8002926 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d903      	bls.n	80028fa <DMA_CheckFifoParam+0xb6>
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d003      	beq.n	8002900 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028f8:	e018      	b.n	800292c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	73fb      	strb	r3, [r7, #15]
      break;
 80028fe:	e015      	b.n	800292c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002904:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00e      	beq.n	800292a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	73fb      	strb	r3, [r7, #15]
      break;
 8002910:	e00b      	b.n	800292a <DMA_CheckFifoParam+0xe6>
      break;
 8002912:	bf00      	nop
 8002914:	e00a      	b.n	800292c <DMA_CheckFifoParam+0xe8>
      break;
 8002916:	bf00      	nop
 8002918:	e008      	b.n	800292c <DMA_CheckFifoParam+0xe8>
      break;
 800291a:	bf00      	nop
 800291c:	e006      	b.n	800292c <DMA_CheckFifoParam+0xe8>
      break;
 800291e:	bf00      	nop
 8002920:	e004      	b.n	800292c <DMA_CheckFifoParam+0xe8>
      break;
 8002922:	bf00      	nop
 8002924:	e002      	b.n	800292c <DMA_CheckFifoParam+0xe8>
      break;   
 8002926:	bf00      	nop
 8002928:	e000      	b.n	800292c <DMA_CheckFifoParam+0xe8>
      break;
 800292a:	bf00      	nop
    }
  } 
  
  return status; 
 800292c:	7bfb      	ldrb	r3, [r7, #15]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop

0800293c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800293c:	b480      	push	{r7}
 800293e:	b089      	sub	sp, #36	@ 0x24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800294e:	2300      	movs	r3, #0
 8002950:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
 8002956:	e165      	b.n	8002c24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002958:	2201      	movs	r2, #1
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	4013      	ands	r3, r2
 800296a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	429a      	cmp	r2, r3
 8002972:	f040 8154 	bne.w	8002c1e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b01      	cmp	r3, #1
 8002980:	d005      	beq.n	800298e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800298a:	2b02      	cmp	r3, #2
 800298c:	d130      	bne.n	80029f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	2203      	movs	r2, #3
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43db      	mvns	r3, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029c4:	2201      	movs	r2, #1
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	f003 0201 	and.w	r2, r3, #1
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d017      	beq.n	8002a2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	2203      	movs	r2, #3
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 0303 	and.w	r3, r3, #3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d123      	bne.n	8002a80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	08da      	lsrs	r2, r3, #3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3208      	adds	r2, #8
 8002a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	220f      	movs	r2, #15
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	08da      	lsrs	r2, r3, #3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3208      	adds	r2, #8
 8002a7a:	69b9      	ldr	r1, [r7, #24]
 8002a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 0203 	and.w	r2, r3, #3
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 80ae 	beq.w	8002c1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	4b5d      	ldr	r3, [pc, #372]	@ (8002c3c <HAL_GPIO_Init+0x300>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aca:	4a5c      	ldr	r2, [pc, #368]	@ (8002c3c <HAL_GPIO_Init+0x300>)
 8002acc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ad2:	4b5a      	ldr	r3, [pc, #360]	@ (8002c3c <HAL_GPIO_Init+0x300>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ade:	4a58      	ldr	r2, [pc, #352]	@ (8002c40 <HAL_GPIO_Init+0x304>)
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	089b      	lsrs	r3, r3, #2
 8002ae4:	3302      	adds	r3, #2
 8002ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	220f      	movs	r2, #15
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43db      	mvns	r3, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4013      	ands	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a4f      	ldr	r2, [pc, #316]	@ (8002c44 <HAL_GPIO_Init+0x308>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d025      	beq.n	8002b56 <HAL_GPIO_Init+0x21a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a4e      	ldr	r2, [pc, #312]	@ (8002c48 <HAL_GPIO_Init+0x30c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d01f      	beq.n	8002b52 <HAL_GPIO_Init+0x216>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a4d      	ldr	r2, [pc, #308]	@ (8002c4c <HAL_GPIO_Init+0x310>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d019      	beq.n	8002b4e <HAL_GPIO_Init+0x212>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a4c      	ldr	r2, [pc, #304]	@ (8002c50 <HAL_GPIO_Init+0x314>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d013      	beq.n	8002b4a <HAL_GPIO_Init+0x20e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a4b      	ldr	r2, [pc, #300]	@ (8002c54 <HAL_GPIO_Init+0x318>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d00d      	beq.n	8002b46 <HAL_GPIO_Init+0x20a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a4a      	ldr	r2, [pc, #296]	@ (8002c58 <HAL_GPIO_Init+0x31c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d007      	beq.n	8002b42 <HAL_GPIO_Init+0x206>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a49      	ldr	r2, [pc, #292]	@ (8002c5c <HAL_GPIO_Init+0x320>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d101      	bne.n	8002b3e <HAL_GPIO_Init+0x202>
 8002b3a:	2306      	movs	r3, #6
 8002b3c:	e00c      	b.n	8002b58 <HAL_GPIO_Init+0x21c>
 8002b3e:	2307      	movs	r3, #7
 8002b40:	e00a      	b.n	8002b58 <HAL_GPIO_Init+0x21c>
 8002b42:	2305      	movs	r3, #5
 8002b44:	e008      	b.n	8002b58 <HAL_GPIO_Init+0x21c>
 8002b46:	2304      	movs	r3, #4
 8002b48:	e006      	b.n	8002b58 <HAL_GPIO_Init+0x21c>
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e004      	b.n	8002b58 <HAL_GPIO_Init+0x21c>
 8002b4e:	2302      	movs	r3, #2
 8002b50:	e002      	b.n	8002b58 <HAL_GPIO_Init+0x21c>
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <HAL_GPIO_Init+0x21c>
 8002b56:	2300      	movs	r3, #0
 8002b58:	69fa      	ldr	r2, [r7, #28]
 8002b5a:	f002 0203 	and.w	r2, r2, #3
 8002b5e:	0092      	lsls	r2, r2, #2
 8002b60:	4093      	lsls	r3, r2
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b68:	4935      	ldr	r1, [pc, #212]	@ (8002c40 <HAL_GPIO_Init+0x304>)
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	089b      	lsrs	r3, r3, #2
 8002b6e:	3302      	adds	r3, #2
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b76:	4b3a      	ldr	r3, [pc, #232]	@ (8002c60 <HAL_GPIO_Init+0x324>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4013      	ands	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b9a:	4a31      	ldr	r2, [pc, #196]	@ (8002c60 <HAL_GPIO_Init+0x324>)
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ba0:	4b2f      	ldr	r3, [pc, #188]	@ (8002c60 <HAL_GPIO_Init+0x324>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bc4:	4a26      	ldr	r2, [pc, #152]	@ (8002c60 <HAL_GPIO_Init+0x324>)
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bca:	4b25      	ldr	r3, [pc, #148]	@ (8002c60 <HAL_GPIO_Init+0x324>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bee:	4a1c      	ldr	r2, [pc, #112]	@ (8002c60 <HAL_GPIO_Init+0x324>)
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c60 <HAL_GPIO_Init+0x324>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c18:	4a11      	ldr	r2, [pc, #68]	@ (8002c60 <HAL_GPIO_Init+0x324>)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	3301      	adds	r3, #1
 8002c22:	61fb      	str	r3, [r7, #28]
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	2b0f      	cmp	r3, #15
 8002c28:	f67f ae96 	bls.w	8002958 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	bf00      	nop
 8002c30:	3724      	adds	r7, #36	@ 0x24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	40013800 	.word	0x40013800
 8002c44:	40020000 	.word	0x40020000
 8002c48:	40020400 	.word	0x40020400
 8002c4c:	40020800 	.word	0x40020800
 8002c50:	40020c00 	.word	0x40020c00
 8002c54:	40021000 	.word	0x40021000
 8002c58:	40021400 	.word	0x40021400
 8002c5c:	40021800 	.word	0x40021800
 8002c60:	40013c00 	.word	0x40013c00

08002c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	807b      	strh	r3, [r7, #2]
 8002c70:	4613      	mov	r3, r2
 8002c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c74:	787b      	ldrb	r3, [r7, #1]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c7a:	887a      	ldrh	r2, [r7, #2]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c80:	e003      	b.n	8002c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c82:	887b      	ldrh	r3, [r7, #2]
 8002c84:	041a      	lsls	r2, r3, #16
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	619a      	str	r2, [r3, #24]
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	603b      	str	r3, [r7, #0]
 8002ca6:	4b20      	ldr	r3, [pc, #128]	@ (8002d28 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002caa:	4a1f      	ldr	r2, [pc, #124]	@ (8002d28 <HAL_PWREx_EnableOverDrive+0x90>)
 8002cac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d28 <HAL_PWREx_EnableOverDrive+0x90>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8002d2c <HAL_PWREx_EnableOverDrive+0x94>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cc4:	f7fe fe64 	bl	8001990 <HAL_GetTick>
 8002cc8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cca:	e009      	b.n	8002ce0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ccc:	f7fe fe60 	bl	8001990 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002cda:	d901      	bls.n	8002ce0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e01f      	b.n	8002d20 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ce0:	4b13      	ldr	r3, [pc, #76]	@ (8002d30 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cec:	d1ee      	bne.n	8002ccc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002cee:	4b11      	ldr	r3, [pc, #68]	@ (8002d34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cf4:	f7fe fe4c 	bl	8001990 <HAL_GetTick>
 8002cf8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cfa:	e009      	b.n	8002d10 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cfc:	f7fe fe48 	bl	8001990 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d0a:	d901      	bls.n	8002d10 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e007      	b.n	8002d20 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d10:	4b07      	ldr	r3, [pc, #28]	@ (8002d30 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d1c:	d1ee      	bne.n	8002cfc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	420e0040 	.word	0x420e0040
 8002d30:	40007000 	.word	0x40007000
 8002d34:	420e0044 	.word	0x420e0044

08002d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0cc      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b68      	ldr	r3, [pc, #416]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d90c      	bls.n	8002d74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5a:	4b65      	ldr	r3, [pc, #404]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d62:	4b63      	ldr	r3, [pc, #396]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e0b8      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d020      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d8c:	4b59      	ldr	r3, [pc, #356]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	4a58      	ldr	r2, [pc, #352]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002da4:	4b53      	ldr	r3, [pc, #332]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	4a52      	ldr	r2, [pc, #328]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002dae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db0:	4b50      	ldr	r3, [pc, #320]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	494d      	ldr	r1, [pc, #308]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d044      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d107      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd6:	4b47      	ldr	r3, [pc, #284]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d119      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e07f      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d003      	beq.n	8002df6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d107      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e06f      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e06:	4b3b      	ldr	r3, [pc, #236]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e067      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e16:	4b37      	ldr	r3, [pc, #220]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f023 0203 	bic.w	r2, r3, #3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4934      	ldr	r1, [pc, #208]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e28:	f7fe fdb2 	bl	8001990 <HAL_GetTick>
 8002e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2e:	e00a      	b.n	8002e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e30:	f7fe fdae 	bl	8001990 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e04f      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e46:	4b2b      	ldr	r3, [pc, #172]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 020c 	and.w	r2, r3, #12
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d1eb      	bne.n	8002e30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e58:	4b25      	ldr	r3, [pc, #148]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 030f 	and.w	r3, r3, #15
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d20c      	bcs.n	8002e80 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e66:	4b22      	ldr	r3, [pc, #136]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6e:	4b20      	ldr	r3, [pc, #128]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e032      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e8c:	4b19      	ldr	r3, [pc, #100]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	4916      	ldr	r1, [pc, #88]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d009      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eaa:	4b12      	ldr	r3, [pc, #72]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	490e      	ldr	r1, [pc, #56]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ebe:	f000 f821 	bl	8002f04 <HAL_RCC_GetSysClockFreq>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	490a      	ldr	r1, [pc, #40]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed0:	5ccb      	ldrb	r3, [r1, r3]
 8002ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed6:	4a09      	ldr	r2, [pc, #36]	@ (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002eda:	4b09      	ldr	r3, [pc, #36]	@ (8002f00 <HAL_RCC_ClockConfig+0x1c8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fe fd12 	bl	8001908 <HAL_InitTick>

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40023c00 	.word	0x40023c00
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	08005828 	.word	0x08005828
 8002efc:	20000000 	.word	0x20000000
 8002f00:	20000004 	.word	0x20000004

08002f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f08:	b0ae      	sub	sp, #184	@ 0xb8
 8002f0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f2a:	4bcb      	ldr	r3, [pc, #812]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
 8002f32:	2b0c      	cmp	r3, #12
 8002f34:	f200 8204 	bhi.w	8003340 <HAL_RCC_GetSysClockFreq+0x43c>
 8002f38:	a201      	add	r2, pc, #4	@ (adr r2, 8002f40 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3e:	bf00      	nop
 8002f40:	08002f75 	.word	0x08002f75
 8002f44:	08003341 	.word	0x08003341
 8002f48:	08003341 	.word	0x08003341
 8002f4c:	08003341 	.word	0x08003341
 8002f50:	08002f7d 	.word	0x08002f7d
 8002f54:	08003341 	.word	0x08003341
 8002f58:	08003341 	.word	0x08003341
 8002f5c:	08003341 	.word	0x08003341
 8002f60:	08002f85 	.word	0x08002f85
 8002f64:	08003341 	.word	0x08003341
 8002f68:	08003341 	.word	0x08003341
 8002f6c:	08003341 	.word	0x08003341
 8002f70:	08003175 	.word	0x08003175
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f74:	4bb9      	ldr	r3, [pc, #740]	@ (800325c <HAL_RCC_GetSysClockFreq+0x358>)
 8002f76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f7a:	e1e5      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f7c:	4bb7      	ldr	r3, [pc, #732]	@ (800325c <HAL_RCC_GetSysClockFreq+0x358>)
 8002f7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f82:	e1e1      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f84:	4bb4      	ldr	r3, [pc, #720]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f90:	4bb1      	ldr	r3, [pc, #708]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d071      	beq.n	8003080 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f9c:	4bae      	ldr	r3, [pc, #696]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	099b      	lsrs	r3, r3, #6
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002fa8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002fac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fb4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002fbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002fc2:	4622      	mov	r2, r4
 8002fc4:	462b      	mov	r3, r5
 8002fc6:	f04f 0000 	mov.w	r0, #0
 8002fca:	f04f 0100 	mov.w	r1, #0
 8002fce:	0159      	lsls	r1, r3, #5
 8002fd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fd4:	0150      	lsls	r0, r2, #5
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4621      	mov	r1, r4
 8002fdc:	1a51      	subs	r1, r2, r1
 8002fde:	6439      	str	r1, [r7, #64]	@ 0x40
 8002fe0:	4629      	mov	r1, r5
 8002fe2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fe6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002ff4:	4649      	mov	r1, r9
 8002ff6:	018b      	lsls	r3, r1, #6
 8002ff8:	4641      	mov	r1, r8
 8002ffa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ffe:	4641      	mov	r1, r8
 8003000:	018a      	lsls	r2, r1, #6
 8003002:	4641      	mov	r1, r8
 8003004:	1a51      	subs	r1, r2, r1
 8003006:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003008:	4649      	mov	r1, r9
 800300a:	eb63 0301 	sbc.w	r3, r3, r1
 800300e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800301c:	4649      	mov	r1, r9
 800301e:	00cb      	lsls	r3, r1, #3
 8003020:	4641      	mov	r1, r8
 8003022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003026:	4641      	mov	r1, r8
 8003028:	00ca      	lsls	r2, r1, #3
 800302a:	4610      	mov	r0, r2
 800302c:	4619      	mov	r1, r3
 800302e:	4603      	mov	r3, r0
 8003030:	4622      	mov	r2, r4
 8003032:	189b      	adds	r3, r3, r2
 8003034:	633b      	str	r3, [r7, #48]	@ 0x30
 8003036:	462b      	mov	r3, r5
 8003038:	460a      	mov	r2, r1
 800303a:	eb42 0303 	adc.w	r3, r2, r3
 800303e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	f04f 0300 	mov.w	r3, #0
 8003048:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800304c:	4629      	mov	r1, r5
 800304e:	028b      	lsls	r3, r1, #10
 8003050:	4621      	mov	r1, r4
 8003052:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003056:	4621      	mov	r1, r4
 8003058:	028a      	lsls	r2, r1, #10
 800305a:	4610      	mov	r0, r2
 800305c:	4619      	mov	r1, r3
 800305e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003062:	2200      	movs	r2, #0
 8003064:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003068:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800306c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003070:	f7fd f8c8 	bl	8000204 <__aeabi_uldivmod>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4613      	mov	r3, r2
 800307a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800307e:	e067      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003080:	4b75      	ldr	r3, [pc, #468]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x354>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	099b      	lsrs	r3, r3, #6
 8003086:	2200      	movs	r2, #0
 8003088:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800308c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003090:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003098:	67bb      	str	r3, [r7, #120]	@ 0x78
 800309a:	2300      	movs	r3, #0
 800309c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800309e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80030a2:	4622      	mov	r2, r4
 80030a4:	462b      	mov	r3, r5
 80030a6:	f04f 0000 	mov.w	r0, #0
 80030aa:	f04f 0100 	mov.w	r1, #0
 80030ae:	0159      	lsls	r1, r3, #5
 80030b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030b4:	0150      	lsls	r0, r2, #5
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
 80030ba:	4621      	mov	r1, r4
 80030bc:	1a51      	subs	r1, r2, r1
 80030be:	62b9      	str	r1, [r7, #40]	@ 0x28
 80030c0:	4629      	mov	r1, r5
 80030c2:	eb63 0301 	sbc.w	r3, r3, r1
 80030c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80030d4:	4649      	mov	r1, r9
 80030d6:	018b      	lsls	r3, r1, #6
 80030d8:	4641      	mov	r1, r8
 80030da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030de:	4641      	mov	r1, r8
 80030e0:	018a      	lsls	r2, r1, #6
 80030e2:	4641      	mov	r1, r8
 80030e4:	ebb2 0a01 	subs.w	sl, r2, r1
 80030e8:	4649      	mov	r1, r9
 80030ea:	eb63 0b01 	sbc.w	fp, r3, r1
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003102:	4692      	mov	sl, r2
 8003104:	469b      	mov	fp, r3
 8003106:	4623      	mov	r3, r4
 8003108:	eb1a 0303 	adds.w	r3, sl, r3
 800310c:	623b      	str	r3, [r7, #32]
 800310e:	462b      	mov	r3, r5
 8003110:	eb4b 0303 	adc.w	r3, fp, r3
 8003114:	627b      	str	r3, [r7, #36]	@ 0x24
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003122:	4629      	mov	r1, r5
 8003124:	028b      	lsls	r3, r1, #10
 8003126:	4621      	mov	r1, r4
 8003128:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800312c:	4621      	mov	r1, r4
 800312e:	028a      	lsls	r2, r1, #10
 8003130:	4610      	mov	r0, r2
 8003132:	4619      	mov	r1, r3
 8003134:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003138:	2200      	movs	r2, #0
 800313a:	673b      	str	r3, [r7, #112]	@ 0x70
 800313c:	677a      	str	r2, [r7, #116]	@ 0x74
 800313e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003142:	f7fd f85f 	bl	8000204 <__aeabi_uldivmod>
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	4613      	mov	r3, r2
 800314c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003150:	4b41      	ldr	r3, [pc, #260]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x354>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	0c1b      	lsrs	r3, r3, #16
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	3301      	adds	r3, #1
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003162:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003166:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800316a:	fbb2 f3f3 	udiv	r3, r2, r3
 800316e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003172:	e0e9      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003174:	4b38      	ldr	r3, [pc, #224]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x354>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800317c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003180:	4b35      	ldr	r3, [pc, #212]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x354>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d069      	beq.n	8003260 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800318c:	4b32      	ldr	r3, [pc, #200]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x354>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	099b      	lsrs	r3, r3, #6
 8003192:	2200      	movs	r2, #0
 8003194:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003196:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003198:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800319a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800319e:	663b      	str	r3, [r7, #96]	@ 0x60
 80031a0:	2300      	movs	r3, #0
 80031a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80031a4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80031a8:	4622      	mov	r2, r4
 80031aa:	462b      	mov	r3, r5
 80031ac:	f04f 0000 	mov.w	r0, #0
 80031b0:	f04f 0100 	mov.w	r1, #0
 80031b4:	0159      	lsls	r1, r3, #5
 80031b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031ba:	0150      	lsls	r0, r2, #5
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	4621      	mov	r1, r4
 80031c2:	1a51      	subs	r1, r2, r1
 80031c4:	61b9      	str	r1, [r7, #24]
 80031c6:	4629      	mov	r1, r5
 80031c8:	eb63 0301 	sbc.w	r3, r3, r1
 80031cc:	61fb      	str	r3, [r7, #28]
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80031da:	4659      	mov	r1, fp
 80031dc:	018b      	lsls	r3, r1, #6
 80031de:	4651      	mov	r1, sl
 80031e0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031e4:	4651      	mov	r1, sl
 80031e6:	018a      	lsls	r2, r1, #6
 80031e8:	4651      	mov	r1, sl
 80031ea:	ebb2 0801 	subs.w	r8, r2, r1
 80031ee:	4659      	mov	r1, fp
 80031f0:	eb63 0901 	sbc.w	r9, r3, r1
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003200:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003204:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003208:	4690      	mov	r8, r2
 800320a:	4699      	mov	r9, r3
 800320c:	4623      	mov	r3, r4
 800320e:	eb18 0303 	adds.w	r3, r8, r3
 8003212:	613b      	str	r3, [r7, #16]
 8003214:	462b      	mov	r3, r5
 8003216:	eb49 0303 	adc.w	r3, r9, r3
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	f04f 0300 	mov.w	r3, #0
 8003224:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003228:	4629      	mov	r1, r5
 800322a:	028b      	lsls	r3, r1, #10
 800322c:	4621      	mov	r1, r4
 800322e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003232:	4621      	mov	r1, r4
 8003234:	028a      	lsls	r2, r1, #10
 8003236:	4610      	mov	r0, r2
 8003238:	4619      	mov	r1, r3
 800323a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800323e:	2200      	movs	r2, #0
 8003240:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003242:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003244:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003248:	f7fc ffdc 	bl	8000204 <__aeabi_uldivmod>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4613      	mov	r3, r2
 8003252:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003256:	e063      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0x41c>
 8003258:	40023800 	.word	0x40023800
 800325c:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003260:	4b3d      	ldr	r3, [pc, #244]	@ (8003358 <HAL_RCC_GetSysClockFreq+0x454>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	099b      	lsrs	r3, r3, #6
 8003266:	2200      	movs	r2, #0
 8003268:	4618      	mov	r0, r3
 800326a:	4611      	mov	r1, r2
 800326c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003270:	653b      	str	r3, [r7, #80]	@ 0x50
 8003272:	2300      	movs	r3, #0
 8003274:	657b      	str	r3, [r7, #84]	@ 0x54
 8003276:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800327a:	4642      	mov	r2, r8
 800327c:	464b      	mov	r3, r9
 800327e:	f04f 0000 	mov.w	r0, #0
 8003282:	f04f 0100 	mov.w	r1, #0
 8003286:	0159      	lsls	r1, r3, #5
 8003288:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800328c:	0150      	lsls	r0, r2, #5
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4641      	mov	r1, r8
 8003294:	1a51      	subs	r1, r2, r1
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	4649      	mov	r1, r9
 800329a:	eb63 0301 	sbc.w	r3, r3, r1
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80032ac:	4659      	mov	r1, fp
 80032ae:	018b      	lsls	r3, r1, #6
 80032b0:	4651      	mov	r1, sl
 80032b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032b6:	4651      	mov	r1, sl
 80032b8:	018a      	lsls	r2, r1, #6
 80032ba:	4651      	mov	r1, sl
 80032bc:	1a54      	subs	r4, r2, r1
 80032be:	4659      	mov	r1, fp
 80032c0:	eb63 0501 	sbc.w	r5, r3, r1
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	00eb      	lsls	r3, r5, #3
 80032ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032d2:	00e2      	lsls	r2, r4, #3
 80032d4:	4614      	mov	r4, r2
 80032d6:	461d      	mov	r5, r3
 80032d8:	4643      	mov	r3, r8
 80032da:	18e3      	adds	r3, r4, r3
 80032dc:	603b      	str	r3, [r7, #0]
 80032de:	464b      	mov	r3, r9
 80032e0:	eb45 0303 	adc.w	r3, r5, r3
 80032e4:	607b      	str	r3, [r7, #4]
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032f2:	4629      	mov	r1, r5
 80032f4:	028b      	lsls	r3, r1, #10
 80032f6:	4621      	mov	r1, r4
 80032f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032fc:	4621      	mov	r1, r4
 80032fe:	028a      	lsls	r2, r1, #10
 8003300:	4610      	mov	r0, r2
 8003302:	4619      	mov	r1, r3
 8003304:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003308:	2200      	movs	r2, #0
 800330a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800330c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800330e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003312:	f7fc ff77 	bl	8000204 <__aeabi_uldivmod>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4613      	mov	r3, r2
 800331c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003320:	4b0d      	ldr	r3, [pc, #52]	@ (8003358 <HAL_RCC_GetSysClockFreq+0x454>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	0f1b      	lsrs	r3, r3, #28
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800332e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003332:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003336:	fbb2 f3f3 	udiv	r3, r2, r3
 800333a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800333e:	e003      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003340:	4b06      	ldr	r3, [pc, #24]	@ (800335c <HAL_RCC_GetSysClockFreq+0x458>)
 8003342:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003346:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003348:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800334c:	4618      	mov	r0, r3
 800334e:	37b8      	adds	r7, #184	@ 0xb8
 8003350:	46bd      	mov	sp, r7
 8003352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003356:	bf00      	nop
 8003358:	40023800 	.word	0x40023800
 800335c:	00f42400 	.word	0x00f42400

08003360 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e28d      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 8083 	beq.w	8003486 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003380:	4b94      	ldr	r3, [pc, #592]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 030c 	and.w	r3, r3, #12
 8003388:	2b04      	cmp	r3, #4
 800338a:	d019      	beq.n	80033c0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800338c:	4b91      	ldr	r3, [pc, #580]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 030c 	and.w	r3, r3, #12
        || \
 8003394:	2b08      	cmp	r3, #8
 8003396:	d106      	bne.n	80033a6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003398:	4b8e      	ldr	r3, [pc, #568]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033a4:	d00c      	beq.n	80033c0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033a6:	4b8b      	ldr	r3, [pc, #556]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80033ae:	2b0c      	cmp	r3, #12
 80033b0:	d112      	bne.n	80033d8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033b2:	4b88      	ldr	r3, [pc, #544]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033be:	d10b      	bne.n	80033d8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c0:	4b84      	ldr	r3, [pc, #528]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d05b      	beq.n	8003484 <HAL_RCC_OscConfig+0x124>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d157      	bne.n	8003484 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e25a      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033e0:	d106      	bne.n	80033f0 <HAL_RCC_OscConfig+0x90>
 80033e2:	4b7c      	ldr	r3, [pc, #496]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a7b      	ldr	r2, [pc, #492]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 80033e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	e01d      	b.n	800342c <HAL_RCC_OscConfig+0xcc>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033f8:	d10c      	bne.n	8003414 <HAL_RCC_OscConfig+0xb4>
 80033fa:	4b76      	ldr	r3, [pc, #472]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a75      	ldr	r2, [pc, #468]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 8003400:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	4b73      	ldr	r3, [pc, #460]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a72      	ldr	r2, [pc, #456]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 800340c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	e00b      	b.n	800342c <HAL_RCC_OscConfig+0xcc>
 8003414:	4b6f      	ldr	r3, [pc, #444]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a6e      	ldr	r2, [pc, #440]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 800341a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	4b6c      	ldr	r3, [pc, #432]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a6b      	ldr	r2, [pc, #428]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 8003426:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800342a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d013      	beq.n	800345c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003434:	f7fe faac 	bl	8001990 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800343c:	f7fe faa8 	bl	8001990 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	@ 0x64
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e21f      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344e:	4b61      	ldr	r3, [pc, #388]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCC_OscConfig+0xdc>
 800345a:	e014      	b.n	8003486 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fe fa98 	bl	8001990 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003464:	f7fe fa94 	bl	8001990 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b64      	cmp	r3, #100	@ 0x64
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e20b      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003476:	4b57      	ldr	r3, [pc, #348]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x104>
 8003482:	e000      	b.n	8003486 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d06f      	beq.n	8003572 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003492:	4b50      	ldr	r3, [pc, #320]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
 800349a:	2b00      	cmp	r3, #0
 800349c:	d017      	beq.n	80034ce <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800349e:	4b4d      	ldr	r3, [pc, #308]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 030c 	and.w	r3, r3, #12
        || \
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d105      	bne.n	80034b6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80034aa:	4b4a      	ldr	r3, [pc, #296]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00b      	beq.n	80034ce <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034b6:	4b47      	ldr	r3, [pc, #284]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80034be:	2b0c      	cmp	r3, #12
 80034c0:	d11c      	bne.n	80034fc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034c2:	4b44      	ldr	r3, [pc, #272]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d116      	bne.n	80034fc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ce:	4b41      	ldr	r3, [pc, #260]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d005      	beq.n	80034e6 <HAL_RCC_OscConfig+0x186>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d001      	beq.n	80034e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e1d3      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e6:	4b3b      	ldr	r3, [pc, #236]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	4937      	ldr	r1, [pc, #220]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034fa:	e03a      	b.n	8003572 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d020      	beq.n	8003546 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003504:	4b34      	ldr	r3, [pc, #208]	@ (80035d8 <HAL_RCC_OscConfig+0x278>)
 8003506:	2201      	movs	r2, #1
 8003508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350a:	f7fe fa41 	bl	8001990 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003512:	f7fe fa3d 	bl	8001990 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e1b4      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003524:	4b2b      	ldr	r3, [pc, #172]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0f0      	beq.n	8003512 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003530:	4b28      	ldr	r3, [pc, #160]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	4925      	ldr	r1, [pc, #148]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 8003540:	4313      	orrs	r3, r2
 8003542:	600b      	str	r3, [r1, #0]
 8003544:	e015      	b.n	8003572 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003546:	4b24      	ldr	r3, [pc, #144]	@ (80035d8 <HAL_RCC_OscConfig+0x278>)
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fe fa20 	bl	8001990 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003554:	f7fe fa1c 	bl	8001990 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e193      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003566:	4b1b      	ldr	r3, [pc, #108]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f0      	bne.n	8003554 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b00      	cmp	r3, #0
 800357c:	d036      	beq.n	80035ec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d016      	beq.n	80035b4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003586:	4b15      	ldr	r3, [pc, #84]	@ (80035dc <HAL_RCC_OscConfig+0x27c>)
 8003588:	2201      	movs	r2, #1
 800358a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358c:	f7fe fa00 	bl	8001990 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003594:	f7fe f9fc 	bl	8001990 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e173      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a6:	4b0b      	ldr	r3, [pc, #44]	@ (80035d4 <HAL_RCC_OscConfig+0x274>)
 80035a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0x234>
 80035b2:	e01b      	b.n	80035ec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035b4:	4b09      	ldr	r3, [pc, #36]	@ (80035dc <HAL_RCC_OscConfig+0x27c>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ba:	f7fe f9e9 	bl	8001990 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c0:	e00e      	b.n	80035e0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c2:	f7fe f9e5 	bl	8001990 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d907      	bls.n	80035e0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e15c      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
 80035d4:	40023800 	.word	0x40023800
 80035d8:	42470000 	.word	0x42470000
 80035dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e0:	4b8a      	ldr	r3, [pc, #552]	@ (800380c <HAL_RCC_OscConfig+0x4ac>)
 80035e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1ea      	bne.n	80035c2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 8097 	beq.w	8003728 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035fa:	2300      	movs	r3, #0
 80035fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035fe:	4b83      	ldr	r3, [pc, #524]	@ (800380c <HAL_RCC_OscConfig+0x4ac>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10f      	bne.n	800362a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800360a:	2300      	movs	r3, #0
 800360c:	60bb      	str	r3, [r7, #8]
 800360e:	4b7f      	ldr	r3, [pc, #508]	@ (800380c <HAL_RCC_OscConfig+0x4ac>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003612:	4a7e      	ldr	r2, [pc, #504]	@ (800380c <HAL_RCC_OscConfig+0x4ac>)
 8003614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003618:	6413      	str	r3, [r2, #64]	@ 0x40
 800361a:	4b7c      	ldr	r3, [pc, #496]	@ (800380c <HAL_RCC_OscConfig+0x4ac>)
 800361c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003626:	2301      	movs	r3, #1
 8003628:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362a:	4b79      	ldr	r3, [pc, #484]	@ (8003810 <HAL_RCC_OscConfig+0x4b0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003632:	2b00      	cmp	r3, #0
 8003634:	d118      	bne.n	8003668 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003636:	4b76      	ldr	r3, [pc, #472]	@ (8003810 <HAL_RCC_OscConfig+0x4b0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a75      	ldr	r2, [pc, #468]	@ (8003810 <HAL_RCC_OscConfig+0x4b0>)
 800363c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003642:	f7fe f9a5 	bl	8001990 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800364a:	f7fe f9a1 	bl	8001990 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e118      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365c:	4b6c      	ldr	r3, [pc, #432]	@ (8003810 <HAL_RCC_OscConfig+0x4b0>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0f0      	beq.n	800364a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d106      	bne.n	800367e <HAL_RCC_OscConfig+0x31e>
 8003670:	4b66      	ldr	r3, [pc, #408]	@ (800380c <HAL_RCC_OscConfig+0x4ac>)
 8003672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003674:	4a65      	ldr	r2, [pc, #404]	@ (800380c <HAL_RCC_OscConfig+0x4ac>)
 8003676:	f043 0301 	orr.w	r3, r3, #1
 800367a:	6713      	str	r3, [r2, #112]	@ 0x70
 800367c:	e01c      	b.n	80036b8 <HAL_RCC_OscConfig+0x358>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2b05      	cmp	r3, #5
 8003684:	d10c      	bne.n	80036a0 <HAL_RCC_OscConfig+0x340>
 8003686:	4b61      	ldr	r3, [pc, #388]	@ (800380c <HAL_RCC_OscConfig+0x4ac>)
 8003688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800368a:	4a60      	ldr	r2, [pc, #384]	@ (800380c <HAL_RCC_OscConfig+0x4ac>)
 800368c:	f043 0304 	orr.w	r3, r3, #4
 8003690:	6713      	str	r3, [r2, #112]	@ 0x70
 8003692:	4b5e      	ldr	r3, [pc, #376]	@ (800380c <HAL_RCC_OscConfig+0x4ac>)
 8003694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003696:	4a5d      	ldr	r2, [pc, #372]	@ (800380c <HAL_RCC_OscConfig+0x4ac>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	6713      	str	r3, [r2, #112]	@ 0x70
 800369e:	e00b      	b.n	80036b8 <HAL_RCC_OscConfig+0x358>
 80036a0:	4b5a      	ldr	r3, [pc, #360]	@ (800380c <HAL_RCC_OscConfig+0x4ac>)
 80036a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a4:	4a59      	ldr	r2, [pc, #356]	@ (800380c <HAL_RCC_OscConfig+0x4ac>)
 80036a6:	f023 0301 	bic.w	r3, r3, #1
 80036aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80036ac:	4b57      	ldr	r3, [pc, #348]	@ (800380c <HAL_RCC_OscConfig+0x4ac>)
 80036ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b0:	4a56      	ldr	r2, [pc, #344]	@ (800380c <HAL_RCC_OscConfig+0x4ac>)
 80036b2:	f023 0304 	bic.w	r3, r3, #4
 80036b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d015      	beq.n	80036ec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c0:	f7fe f966 	bl	8001990 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c6:	e00a      	b.n	80036de <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c8:	f7fe f962 	bl	8001990 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e0d7      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036de:	4b4b      	ldr	r3, [pc, #300]	@ (800380c <HAL_RCC_OscConfig+0x4ac>)
 80036e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0ee      	beq.n	80036c8 <HAL_RCC_OscConfig+0x368>
 80036ea:	e014      	b.n	8003716 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ec:	f7fe f950 	bl	8001990 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f2:	e00a      	b.n	800370a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f4:	f7fe f94c 	bl	8001990 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003702:	4293      	cmp	r3, r2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e0c1      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800370a:	4b40      	ldr	r3, [pc, #256]	@ (800380c <HAL_RCC_OscConfig+0x4ac>)
 800370c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1ee      	bne.n	80036f4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003716:	7dfb      	ldrb	r3, [r7, #23]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d105      	bne.n	8003728 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800371c:	4b3b      	ldr	r3, [pc, #236]	@ (800380c <HAL_RCC_OscConfig+0x4ac>)
 800371e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003720:	4a3a      	ldr	r2, [pc, #232]	@ (800380c <HAL_RCC_OscConfig+0x4ac>)
 8003722:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003726:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 80ad 	beq.w	800388c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003732:	4b36      	ldr	r3, [pc, #216]	@ (800380c <HAL_RCC_OscConfig+0x4ac>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 030c 	and.w	r3, r3, #12
 800373a:	2b08      	cmp	r3, #8
 800373c:	d060      	beq.n	8003800 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d145      	bne.n	80037d2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003746:	4b33      	ldr	r3, [pc, #204]	@ (8003814 <HAL_RCC_OscConfig+0x4b4>)
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374c:	f7fe f920 	bl	8001990 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003754:	f7fe f91c 	bl	8001990 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e093      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003766:	4b29      	ldr	r3, [pc, #164]	@ (800380c <HAL_RCC_OscConfig+0x4ac>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f0      	bne.n	8003754 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69da      	ldr	r2, [r3, #28]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003780:	019b      	lsls	r3, r3, #6
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003788:	085b      	lsrs	r3, r3, #1
 800378a:	3b01      	subs	r3, #1
 800378c:	041b      	lsls	r3, r3, #16
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003794:	061b      	lsls	r3, r3, #24
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379c:	071b      	lsls	r3, r3, #28
 800379e:	491b      	ldr	r1, [pc, #108]	@ (800380c <HAL_RCC_OscConfig+0x4ac>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003814 <HAL_RCC_OscConfig+0x4b4>)
 80037a6:	2201      	movs	r2, #1
 80037a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037aa:	f7fe f8f1 	bl	8001990 <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b0:	e008      	b.n	80037c4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b2:	f7fe f8ed 	bl	8001990 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e064      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c4:	4b11      	ldr	r3, [pc, #68]	@ (800380c <HAL_RCC_OscConfig+0x4ac>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0f0      	beq.n	80037b2 <HAL_RCC_OscConfig+0x452>
 80037d0:	e05c      	b.n	800388c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d2:	4b10      	ldr	r3, [pc, #64]	@ (8003814 <HAL_RCC_OscConfig+0x4b4>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d8:	f7fe f8da 	bl	8001990 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e0:	f7fe f8d6 	bl	8001990 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e04d      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f2:	4b06      	ldr	r3, [pc, #24]	@ (800380c <HAL_RCC_OscConfig+0x4ac>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f0      	bne.n	80037e0 <HAL_RCC_OscConfig+0x480>
 80037fe:	e045      	b.n	800388c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d107      	bne.n	8003818 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e040      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
 800380c:	40023800 	.word	0x40023800
 8003810:	40007000 	.word	0x40007000
 8003814:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003818:	4b1f      	ldr	r3, [pc, #124]	@ (8003898 <HAL_RCC_OscConfig+0x538>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d030      	beq.n	8003888 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003830:	429a      	cmp	r2, r3
 8003832:	d129      	bne.n	8003888 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800383e:	429a      	cmp	r2, r3
 8003840:	d122      	bne.n	8003888 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003848:	4013      	ands	r3, r2
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800384e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003850:	4293      	cmp	r3, r2
 8003852:	d119      	bne.n	8003888 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800385e:	085b      	lsrs	r3, r3, #1
 8003860:	3b01      	subs	r3, #1
 8003862:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003864:	429a      	cmp	r2, r3
 8003866:	d10f      	bne.n	8003888 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003872:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003874:	429a      	cmp	r2, r3
 8003876:	d107      	bne.n	8003888 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003882:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003884:	429a      	cmp	r2, r3
 8003886:	d001      	beq.n	800388c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e000      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40023800 	.word	0x40023800

0800389c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e041      	b.n	8003932 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d106      	bne.n	80038c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fd fc58 	bl	8001178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3304      	adds	r3, #4
 80038d8:	4619      	mov	r1, r3
 80038da:	4610      	mov	r0, r2
 80038dc:	f000 fc6c 	bl	80041b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b01      	cmp	r3, #1
 800394e:	d001      	beq.n	8003954 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e04e      	b.n	80039f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2202      	movs	r2, #2
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a23      	ldr	r2, [pc, #140]	@ (8003a00 <HAL_TIM_Base_Start_IT+0xc4>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d022      	beq.n	80039bc <HAL_TIM_Base_Start_IT+0x80>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800397e:	d01d      	beq.n	80039bc <HAL_TIM_Base_Start_IT+0x80>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a1f      	ldr	r2, [pc, #124]	@ (8003a04 <HAL_TIM_Base_Start_IT+0xc8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d018      	beq.n	80039bc <HAL_TIM_Base_Start_IT+0x80>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a1e      	ldr	r2, [pc, #120]	@ (8003a08 <HAL_TIM_Base_Start_IT+0xcc>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d013      	beq.n	80039bc <HAL_TIM_Base_Start_IT+0x80>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a1c      	ldr	r2, [pc, #112]	@ (8003a0c <HAL_TIM_Base_Start_IT+0xd0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d00e      	beq.n	80039bc <HAL_TIM_Base_Start_IT+0x80>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003a10 <HAL_TIM_Base_Start_IT+0xd4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d009      	beq.n	80039bc <HAL_TIM_Base_Start_IT+0x80>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a19      	ldr	r2, [pc, #100]	@ (8003a14 <HAL_TIM_Base_Start_IT+0xd8>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d004      	beq.n	80039bc <HAL_TIM_Base_Start_IT+0x80>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a18      	ldr	r2, [pc, #96]	@ (8003a18 <HAL_TIM_Base_Start_IT+0xdc>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d111      	bne.n	80039e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2b06      	cmp	r3, #6
 80039cc:	d010      	beq.n	80039f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f042 0201 	orr.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039de:	e007      	b.n	80039f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0201 	orr.w	r2, r2, #1
 80039ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40010000 	.word	0x40010000
 8003a04:	40000400 	.word	0x40000400
 8003a08:	40000800 	.word	0x40000800
 8003a0c:	40000c00 	.word	0x40000c00
 8003a10:	40010400 	.word	0x40010400
 8003a14:	40014000 	.word	0x40014000
 8003a18:	40001800 	.word	0x40001800

08003a1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e041      	b.n	8003ab2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d106      	bne.n	8003a48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f839 	bl	8003aba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3304      	adds	r3, #4
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	f000 fbac 	bl	80041b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
	...

08003ad0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d109      	bne.n	8003af4 <HAL_TIM_PWM_Start+0x24>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	bf14      	ite	ne
 8003aec:	2301      	movne	r3, #1
 8003aee:	2300      	moveq	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	e022      	b.n	8003b3a <HAL_TIM_PWM_Start+0x6a>
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d109      	bne.n	8003b0e <HAL_TIM_PWM_Start+0x3e>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	bf14      	ite	ne
 8003b06:	2301      	movne	r3, #1
 8003b08:	2300      	moveq	r3, #0
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	e015      	b.n	8003b3a <HAL_TIM_PWM_Start+0x6a>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d109      	bne.n	8003b28 <HAL_TIM_PWM_Start+0x58>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	bf14      	ite	ne
 8003b20:	2301      	movne	r3, #1
 8003b22:	2300      	moveq	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	e008      	b.n	8003b3a <HAL_TIM_PWM_Start+0x6a>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	bf14      	ite	ne
 8003b34:	2301      	movne	r3, #1
 8003b36:	2300      	moveq	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e07c      	b.n	8003c3c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d104      	bne.n	8003b52 <HAL_TIM_PWM_Start+0x82>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b50:	e013      	b.n	8003b7a <HAL_TIM_PWM_Start+0xaa>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	d104      	bne.n	8003b62 <HAL_TIM_PWM_Start+0x92>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b60:	e00b      	b.n	8003b7a <HAL_TIM_PWM_Start+0xaa>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d104      	bne.n	8003b72 <HAL_TIM_PWM_Start+0xa2>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b70:	e003      	b.n	8003b7a <HAL_TIM_PWM_Start+0xaa>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2202      	movs	r2, #2
 8003b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	6839      	ldr	r1, [r7, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fe08 	bl	8004798 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a2d      	ldr	r2, [pc, #180]	@ (8003c44 <HAL_TIM_PWM_Start+0x174>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d004      	beq.n	8003b9c <HAL_TIM_PWM_Start+0xcc>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a2c      	ldr	r2, [pc, #176]	@ (8003c48 <HAL_TIM_PWM_Start+0x178>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d101      	bne.n	8003ba0 <HAL_TIM_PWM_Start+0xd0>
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e000      	b.n	8003ba2 <HAL_TIM_PWM_Start+0xd2>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d007      	beq.n	8003bb6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bb4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a22      	ldr	r2, [pc, #136]	@ (8003c44 <HAL_TIM_PWM_Start+0x174>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d022      	beq.n	8003c06 <HAL_TIM_PWM_Start+0x136>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bc8:	d01d      	beq.n	8003c06 <HAL_TIM_PWM_Start+0x136>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a1f      	ldr	r2, [pc, #124]	@ (8003c4c <HAL_TIM_PWM_Start+0x17c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d018      	beq.n	8003c06 <HAL_TIM_PWM_Start+0x136>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8003c50 <HAL_TIM_PWM_Start+0x180>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d013      	beq.n	8003c06 <HAL_TIM_PWM_Start+0x136>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a1c      	ldr	r2, [pc, #112]	@ (8003c54 <HAL_TIM_PWM_Start+0x184>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00e      	beq.n	8003c06 <HAL_TIM_PWM_Start+0x136>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a16      	ldr	r2, [pc, #88]	@ (8003c48 <HAL_TIM_PWM_Start+0x178>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d009      	beq.n	8003c06 <HAL_TIM_PWM_Start+0x136>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a18      	ldr	r2, [pc, #96]	@ (8003c58 <HAL_TIM_PWM_Start+0x188>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d004      	beq.n	8003c06 <HAL_TIM_PWM_Start+0x136>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a16      	ldr	r2, [pc, #88]	@ (8003c5c <HAL_TIM_PWM_Start+0x18c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d111      	bne.n	8003c2a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2b06      	cmp	r3, #6
 8003c16:	d010      	beq.n	8003c3a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c28:	e007      	b.n	8003c3a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f042 0201 	orr.w	r2, r2, #1
 8003c38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40010000 	.word	0x40010000
 8003c48:	40010400 	.word	0x40010400
 8003c4c:	40000400 	.word	0x40000400
 8003c50:	40000800 	.word	0x40000800
 8003c54:	40000c00 	.word	0x40000c00
 8003c58:	40014000 	.word	0x40014000
 8003c5c:	40001800 	.word	0x40001800

08003c60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d020      	beq.n	8003cc4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d01b      	beq.n	8003cc4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f06f 0202 	mvn.w	r2, #2
 8003c94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 fa65 	bl	800417a <HAL_TIM_IC_CaptureCallback>
 8003cb0:	e005      	b.n	8003cbe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 fa57 	bl	8004166 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fa68 	bl	800418e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d020      	beq.n	8003d10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d01b      	beq.n	8003d10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f06f 0204 	mvn.w	r2, #4
 8003ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 fa3f 	bl	800417a <HAL_TIM_IC_CaptureCallback>
 8003cfc:	e005      	b.n	8003d0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fa31 	bl	8004166 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 fa42 	bl	800418e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d020      	beq.n	8003d5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f003 0308 	and.w	r3, r3, #8
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d01b      	beq.n	8003d5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f06f 0208 	mvn.w	r2, #8
 8003d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2204      	movs	r2, #4
 8003d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fa19 	bl	800417a <HAL_TIM_IC_CaptureCallback>
 8003d48:	e005      	b.n	8003d56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fa0b 	bl	8004166 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 fa1c 	bl	800418e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f003 0310 	and.w	r3, r3, #16
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d020      	beq.n	8003da8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f003 0310 	and.w	r3, r3, #16
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d01b      	beq.n	8003da8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f06f 0210 	mvn.w	r2, #16
 8003d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2208      	movs	r2, #8
 8003d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f9f3 	bl	800417a <HAL_TIM_IC_CaptureCallback>
 8003d94:	e005      	b.n	8003da2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f9e5 	bl	8004166 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f9f6 	bl	800418e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00c      	beq.n	8003dcc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d007      	beq.n	8003dcc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f06f 0201 	mvn.w	r2, #1
 8003dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f9c3 	bl	8004152 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00c      	beq.n	8003df0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d007      	beq.n	8003df0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fe8c 	bl	8004b08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00c      	beq.n	8003e14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d007      	beq.n	8003e14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f9c7 	bl	80041a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00c      	beq.n	8003e38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f003 0320 	and.w	r3, r3, #32
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d007      	beq.n	8003e38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f06f 0220 	mvn.w	r2, #32
 8003e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fe5e 	bl	8004af4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e38:	bf00      	nop
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d101      	bne.n	8003e5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e0ae      	b.n	8003fbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b0c      	cmp	r3, #12
 8003e6a:	f200 809f 	bhi.w	8003fac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e74:	08003ea9 	.word	0x08003ea9
 8003e78:	08003fad 	.word	0x08003fad
 8003e7c:	08003fad 	.word	0x08003fad
 8003e80:	08003fad 	.word	0x08003fad
 8003e84:	08003ee9 	.word	0x08003ee9
 8003e88:	08003fad 	.word	0x08003fad
 8003e8c:	08003fad 	.word	0x08003fad
 8003e90:	08003fad 	.word	0x08003fad
 8003e94:	08003f2b 	.word	0x08003f2b
 8003e98:	08003fad 	.word	0x08003fad
 8003e9c:	08003fad 	.word	0x08003fad
 8003ea0:	08003fad 	.word	0x08003fad
 8003ea4:	08003f6b 	.word	0x08003f6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68b9      	ldr	r1, [r7, #8]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fa28 	bl	8004304 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699a      	ldr	r2, [r3, #24]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0208 	orr.w	r2, r2, #8
 8003ec2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699a      	ldr	r2, [r3, #24]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0204 	bic.w	r2, r2, #4
 8003ed2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6999      	ldr	r1, [r3, #24]
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	691a      	ldr	r2, [r3, #16]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	619a      	str	r2, [r3, #24]
      break;
 8003ee6:	e064      	b.n	8003fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68b9      	ldr	r1, [r7, #8]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fa78 	bl	80043e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699a      	ldr	r2, [r3, #24]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699a      	ldr	r2, [r3, #24]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6999      	ldr	r1, [r3, #24]
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	021a      	lsls	r2, r3, #8
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	619a      	str	r2, [r3, #24]
      break;
 8003f28:	e043      	b.n	8003fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68b9      	ldr	r1, [r7, #8]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 facd 	bl	80044d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69da      	ldr	r2, [r3, #28]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f042 0208 	orr.w	r2, r2, #8
 8003f44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	69da      	ldr	r2, [r3, #28]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0204 	bic.w	r2, r2, #4
 8003f54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	69d9      	ldr	r1, [r3, #28]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	61da      	str	r2, [r3, #28]
      break;
 8003f68:	e023      	b.n	8003fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68b9      	ldr	r1, [r7, #8]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 fb21 	bl	80045b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	69da      	ldr	r2, [r3, #28]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	69da      	ldr	r2, [r3, #28]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	69d9      	ldr	r1, [r3, #28]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	021a      	lsls	r2, r3, #8
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	61da      	str	r2, [r3, #28]
      break;
 8003faa:	e002      	b.n	8003fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	75fb      	strb	r3, [r7, #23]
      break;
 8003fb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d101      	bne.n	8003fe0 <HAL_TIM_ConfigClockSource+0x1c>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e0b4      	b.n	800414a <HAL_TIM_ConfigClockSource+0x186>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2202      	movs	r2, #2
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ffe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004006:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004018:	d03e      	beq.n	8004098 <HAL_TIM_ConfigClockSource+0xd4>
 800401a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800401e:	f200 8087 	bhi.w	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004022:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004026:	f000 8086 	beq.w	8004136 <HAL_TIM_ConfigClockSource+0x172>
 800402a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800402e:	d87f      	bhi.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004030:	2b70      	cmp	r3, #112	@ 0x70
 8004032:	d01a      	beq.n	800406a <HAL_TIM_ConfigClockSource+0xa6>
 8004034:	2b70      	cmp	r3, #112	@ 0x70
 8004036:	d87b      	bhi.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004038:	2b60      	cmp	r3, #96	@ 0x60
 800403a:	d050      	beq.n	80040de <HAL_TIM_ConfigClockSource+0x11a>
 800403c:	2b60      	cmp	r3, #96	@ 0x60
 800403e:	d877      	bhi.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004040:	2b50      	cmp	r3, #80	@ 0x50
 8004042:	d03c      	beq.n	80040be <HAL_TIM_ConfigClockSource+0xfa>
 8004044:	2b50      	cmp	r3, #80	@ 0x50
 8004046:	d873      	bhi.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004048:	2b40      	cmp	r3, #64	@ 0x40
 800404a:	d058      	beq.n	80040fe <HAL_TIM_ConfigClockSource+0x13a>
 800404c:	2b40      	cmp	r3, #64	@ 0x40
 800404e:	d86f      	bhi.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004050:	2b30      	cmp	r3, #48	@ 0x30
 8004052:	d064      	beq.n	800411e <HAL_TIM_ConfigClockSource+0x15a>
 8004054:	2b30      	cmp	r3, #48	@ 0x30
 8004056:	d86b      	bhi.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004058:	2b20      	cmp	r3, #32
 800405a:	d060      	beq.n	800411e <HAL_TIM_ConfigClockSource+0x15a>
 800405c:	2b20      	cmp	r3, #32
 800405e:	d867      	bhi.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004060:	2b00      	cmp	r3, #0
 8004062:	d05c      	beq.n	800411e <HAL_TIM_ConfigClockSource+0x15a>
 8004064:	2b10      	cmp	r3, #16
 8004066:	d05a      	beq.n	800411e <HAL_TIM_ConfigClockSource+0x15a>
 8004068:	e062      	b.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800407a:	f000 fb6d 	bl	8004758 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800408c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	609a      	str	r2, [r3, #8]
      break;
 8004096:	e04f      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040a8:	f000 fb56 	bl	8004758 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040ba:	609a      	str	r2, [r3, #8]
      break;
 80040bc:	e03c      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ca:	461a      	mov	r2, r3
 80040cc:	f000 faca 	bl	8004664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2150      	movs	r1, #80	@ 0x50
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 fb23 	bl	8004722 <TIM_ITRx_SetConfig>
      break;
 80040dc:	e02c      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040ea:	461a      	mov	r2, r3
 80040ec:	f000 fae9 	bl	80046c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2160      	movs	r1, #96	@ 0x60
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fb13 	bl	8004722 <TIM_ITRx_SetConfig>
      break;
 80040fc:	e01c      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800410a:	461a      	mov	r2, r3
 800410c:	f000 faaa 	bl	8004664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2140      	movs	r1, #64	@ 0x40
 8004116:	4618      	mov	r0, r3
 8004118:	f000 fb03 	bl	8004722 <TIM_ITRx_SetConfig>
      break;
 800411c:	e00c      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4619      	mov	r1, r3
 8004128:	4610      	mov	r0, r2
 800412a:	f000 fafa 	bl	8004722 <TIM_ITRx_SetConfig>
      break;
 800412e:	e003      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	73fb      	strb	r3, [r7, #15]
      break;
 8004134:	e000      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004136:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004148:	7bfb      	ldrb	r3, [r7, #15]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
	...

080041b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a43      	ldr	r2, [pc, #268]	@ (80042d8 <TIM_Base_SetConfig+0x120>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d013      	beq.n	80041f8 <TIM_Base_SetConfig+0x40>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041d6:	d00f      	beq.n	80041f8 <TIM_Base_SetConfig+0x40>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a40      	ldr	r2, [pc, #256]	@ (80042dc <TIM_Base_SetConfig+0x124>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d00b      	beq.n	80041f8 <TIM_Base_SetConfig+0x40>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a3f      	ldr	r2, [pc, #252]	@ (80042e0 <TIM_Base_SetConfig+0x128>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d007      	beq.n	80041f8 <TIM_Base_SetConfig+0x40>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a3e      	ldr	r2, [pc, #248]	@ (80042e4 <TIM_Base_SetConfig+0x12c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d003      	beq.n	80041f8 <TIM_Base_SetConfig+0x40>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a3d      	ldr	r2, [pc, #244]	@ (80042e8 <TIM_Base_SetConfig+0x130>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d108      	bne.n	800420a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a32      	ldr	r2, [pc, #200]	@ (80042d8 <TIM_Base_SetConfig+0x120>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d02b      	beq.n	800426a <TIM_Base_SetConfig+0xb2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004218:	d027      	beq.n	800426a <TIM_Base_SetConfig+0xb2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a2f      	ldr	r2, [pc, #188]	@ (80042dc <TIM_Base_SetConfig+0x124>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d023      	beq.n	800426a <TIM_Base_SetConfig+0xb2>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a2e      	ldr	r2, [pc, #184]	@ (80042e0 <TIM_Base_SetConfig+0x128>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d01f      	beq.n	800426a <TIM_Base_SetConfig+0xb2>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a2d      	ldr	r2, [pc, #180]	@ (80042e4 <TIM_Base_SetConfig+0x12c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d01b      	beq.n	800426a <TIM_Base_SetConfig+0xb2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a2c      	ldr	r2, [pc, #176]	@ (80042e8 <TIM_Base_SetConfig+0x130>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d017      	beq.n	800426a <TIM_Base_SetConfig+0xb2>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a2b      	ldr	r2, [pc, #172]	@ (80042ec <TIM_Base_SetConfig+0x134>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d013      	beq.n	800426a <TIM_Base_SetConfig+0xb2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a2a      	ldr	r2, [pc, #168]	@ (80042f0 <TIM_Base_SetConfig+0x138>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00f      	beq.n	800426a <TIM_Base_SetConfig+0xb2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a29      	ldr	r2, [pc, #164]	@ (80042f4 <TIM_Base_SetConfig+0x13c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d00b      	beq.n	800426a <TIM_Base_SetConfig+0xb2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a28      	ldr	r2, [pc, #160]	@ (80042f8 <TIM_Base_SetConfig+0x140>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d007      	beq.n	800426a <TIM_Base_SetConfig+0xb2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a27      	ldr	r2, [pc, #156]	@ (80042fc <TIM_Base_SetConfig+0x144>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d003      	beq.n	800426a <TIM_Base_SetConfig+0xb2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a26      	ldr	r2, [pc, #152]	@ (8004300 <TIM_Base_SetConfig+0x148>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d108      	bne.n	800427c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004270:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4313      	orrs	r3, r2
 800427a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	4313      	orrs	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a0e      	ldr	r2, [pc, #56]	@ (80042d8 <TIM_Base_SetConfig+0x120>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d003      	beq.n	80042aa <TIM_Base_SetConfig+0xf2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a10      	ldr	r2, [pc, #64]	@ (80042e8 <TIM_Base_SetConfig+0x130>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d103      	bne.n	80042b2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	691a      	ldr	r2, [r3, #16]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f043 0204 	orr.w	r2, r3, #4
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	601a      	str	r2, [r3, #0]
}
 80042ca:	bf00      	nop
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	40010000 	.word	0x40010000
 80042dc:	40000400 	.word	0x40000400
 80042e0:	40000800 	.word	0x40000800
 80042e4:	40000c00 	.word	0x40000c00
 80042e8:	40010400 	.word	0x40010400
 80042ec:	40014000 	.word	0x40014000
 80042f0:	40014400 	.word	0x40014400
 80042f4:	40014800 	.word	0x40014800
 80042f8:	40001800 	.word	0x40001800
 80042fc:	40001c00 	.word	0x40001c00
 8004300:	40002000 	.word	0x40002000

08004304 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004304:	b480      	push	{r7}
 8004306:	b087      	sub	sp, #28
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	f023 0201 	bic.w	r2, r3, #1
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f023 0303 	bic.w	r3, r3, #3
 800433a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4313      	orrs	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f023 0302 	bic.w	r3, r3, #2
 800434c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	4313      	orrs	r3, r2
 8004356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a20      	ldr	r2, [pc, #128]	@ (80043dc <TIM_OC1_SetConfig+0xd8>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d003      	beq.n	8004368 <TIM_OC1_SetConfig+0x64>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a1f      	ldr	r2, [pc, #124]	@ (80043e0 <TIM_OC1_SetConfig+0xdc>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d10c      	bne.n	8004382 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f023 0308 	bic.w	r3, r3, #8
 800436e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f023 0304 	bic.w	r3, r3, #4
 8004380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a15      	ldr	r2, [pc, #84]	@ (80043dc <TIM_OC1_SetConfig+0xd8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d003      	beq.n	8004392 <TIM_OC1_SetConfig+0x8e>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a14      	ldr	r2, [pc, #80]	@ (80043e0 <TIM_OC1_SetConfig+0xdc>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d111      	bne.n	80043b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	621a      	str	r2, [r3, #32]
}
 80043d0:	bf00      	nop
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	40010000 	.word	0x40010000
 80043e0:	40010400 	.word	0x40010400

080043e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	f023 0210 	bic.w	r2, r3, #16
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800441a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	021b      	lsls	r3, r3, #8
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f023 0320 	bic.w	r3, r3, #32
 800442e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	4313      	orrs	r3, r2
 800443a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a22      	ldr	r2, [pc, #136]	@ (80044c8 <TIM_OC2_SetConfig+0xe4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d003      	beq.n	800444c <TIM_OC2_SetConfig+0x68>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a21      	ldr	r2, [pc, #132]	@ (80044cc <TIM_OC2_SetConfig+0xe8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d10d      	bne.n	8004468 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	4313      	orrs	r3, r2
 800445e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004466:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a17      	ldr	r2, [pc, #92]	@ (80044c8 <TIM_OC2_SetConfig+0xe4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d003      	beq.n	8004478 <TIM_OC2_SetConfig+0x94>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a16      	ldr	r2, [pc, #88]	@ (80044cc <TIM_OC2_SetConfig+0xe8>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d113      	bne.n	80044a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800447e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004486:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	4313      	orrs	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	621a      	str	r2, [r3, #32]
}
 80044ba:	bf00      	nop
 80044bc:	371c      	adds	r7, #28
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40010000 	.word	0x40010000
 80044cc:	40010400 	.word	0x40010400

080044d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f023 0303 	bic.w	r3, r3, #3
 8004506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	4313      	orrs	r3, r2
 8004510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004518:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	021b      	lsls	r3, r3, #8
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	4313      	orrs	r3, r2
 8004524:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a21      	ldr	r2, [pc, #132]	@ (80045b0 <TIM_OC3_SetConfig+0xe0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d003      	beq.n	8004536 <TIM_OC3_SetConfig+0x66>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a20      	ldr	r2, [pc, #128]	@ (80045b4 <TIM_OC3_SetConfig+0xe4>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d10d      	bne.n	8004552 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800453c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	021b      	lsls	r3, r3, #8
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	4313      	orrs	r3, r2
 8004548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a16      	ldr	r2, [pc, #88]	@ (80045b0 <TIM_OC3_SetConfig+0xe0>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d003      	beq.n	8004562 <TIM_OC3_SetConfig+0x92>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a15      	ldr	r2, [pc, #84]	@ (80045b4 <TIM_OC3_SetConfig+0xe4>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d113      	bne.n	800458a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	4313      	orrs	r3, r2
 800457c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	011b      	lsls	r3, r3, #4
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	4313      	orrs	r3, r2
 8004588:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	621a      	str	r2, [r3, #32]
}
 80045a4:	bf00      	nop
 80045a6:	371c      	adds	r7, #28
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	40010000 	.word	0x40010000
 80045b4:	40010400 	.word	0x40010400

080045b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	021b      	lsls	r3, r3, #8
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004602:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	031b      	lsls	r3, r3, #12
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a12      	ldr	r2, [pc, #72]	@ (800465c <TIM_OC4_SetConfig+0xa4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d003      	beq.n	8004620 <TIM_OC4_SetConfig+0x68>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a11      	ldr	r2, [pc, #68]	@ (8004660 <TIM_OC4_SetConfig+0xa8>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d109      	bne.n	8004634 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004626:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	019b      	lsls	r3, r3, #6
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	4313      	orrs	r3, r2
 8004632:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	621a      	str	r2, [r3, #32]
}
 800464e:	bf00      	nop
 8004650:	371c      	adds	r7, #28
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	40010000 	.word	0x40010000
 8004660:	40010400 	.word	0x40010400

08004664 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	f023 0201 	bic.w	r2, r3, #1
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800468e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	011b      	lsls	r3, r3, #4
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	4313      	orrs	r3, r2
 8004698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f023 030a 	bic.w	r3, r3, #10
 80046a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	621a      	str	r2, [r3, #32]
}
 80046b6:	bf00      	nop
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b087      	sub	sp, #28
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	f023 0210 	bic.w	r2, r3, #16
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	031b      	lsls	r3, r3, #12
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	4313      	orrs	r3, r2
 8004708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	621a      	str	r2, [r3, #32]
}
 8004716:	bf00      	nop
 8004718:	371c      	adds	r7, #28
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004722:	b480      	push	{r7}
 8004724:	b085      	sub	sp, #20
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004738:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	f043 0307 	orr.w	r3, r3, #7
 8004744:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	609a      	str	r2, [r3, #8]
}
 800474c:	bf00      	nop
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
 8004764:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004772:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	021a      	lsls	r2, r3, #8
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	431a      	orrs	r2, r3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	4313      	orrs	r3, r2
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	609a      	str	r2, [r3, #8]
}
 800478c:	bf00      	nop
 800478e:	371c      	adds	r7, #28
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f003 031f 	and.w	r3, r3, #31
 80047aa:	2201      	movs	r2, #1
 80047ac:	fa02 f303 	lsl.w	r3, r2, r3
 80047b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a1a      	ldr	r2, [r3, #32]
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	43db      	mvns	r3, r3
 80047ba:	401a      	ands	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a1a      	ldr	r2, [r3, #32]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f003 031f 	and.w	r3, r3, #31
 80047ca:	6879      	ldr	r1, [r7, #4]
 80047cc:	fa01 f303 	lsl.w	r3, r1, r3
 80047d0:	431a      	orrs	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	621a      	str	r2, [r3, #32]
}
 80047d6:	bf00      	nop
 80047d8:	371c      	adds	r7, #28
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
	...

080047e4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d109      	bne.n	8004808 <HAL_TIMEx_PWMN_Start+0x24>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	bf14      	ite	ne
 8004800:	2301      	movne	r3, #1
 8004802:	2300      	moveq	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	e022      	b.n	800484e <HAL_TIMEx_PWMN_Start+0x6a>
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	2b04      	cmp	r3, #4
 800480c:	d109      	bne.n	8004822 <HAL_TIMEx_PWMN_Start+0x3e>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b01      	cmp	r3, #1
 8004818:	bf14      	ite	ne
 800481a:	2301      	movne	r3, #1
 800481c:	2300      	moveq	r3, #0
 800481e:	b2db      	uxtb	r3, r3
 8004820:	e015      	b.n	800484e <HAL_TIMEx_PWMN_Start+0x6a>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b08      	cmp	r3, #8
 8004826:	d109      	bne.n	800483c <HAL_TIMEx_PWMN_Start+0x58>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b01      	cmp	r3, #1
 8004832:	bf14      	ite	ne
 8004834:	2301      	movne	r3, #1
 8004836:	2300      	moveq	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	e008      	b.n	800484e <HAL_TIMEx_PWMN_Start+0x6a>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b01      	cmp	r3, #1
 8004846:	bf14      	ite	ne
 8004848:	2301      	movne	r3, #1
 800484a:	2300      	moveq	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e06d      	b.n	8004932 <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d104      	bne.n	8004866 <HAL_TIMEx_PWMN_Start+0x82>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004864:	e013      	b.n	800488e <HAL_TIMEx_PWMN_Start+0xaa>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b04      	cmp	r3, #4
 800486a:	d104      	bne.n	8004876 <HAL_TIMEx_PWMN_Start+0x92>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004874:	e00b      	b.n	800488e <HAL_TIMEx_PWMN_Start+0xaa>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b08      	cmp	r3, #8
 800487a:	d104      	bne.n	8004886 <HAL_TIMEx_PWMN_Start+0xa2>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004884:	e003      	b.n	800488e <HAL_TIMEx_PWMN_Start+0xaa>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2202      	movs	r2, #2
 800488a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2204      	movs	r2, #4
 8004894:	6839      	ldr	r1, [r7, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f000 f940 	bl	8004b1c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048aa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a22      	ldr	r2, [pc, #136]	@ (800493c <HAL_TIMEx_PWMN_Start+0x158>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d022      	beq.n	80048fc <HAL_TIMEx_PWMN_Start+0x118>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048be:	d01d      	beq.n	80048fc <HAL_TIMEx_PWMN_Start+0x118>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004940 <HAL_TIMEx_PWMN_Start+0x15c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d018      	beq.n	80048fc <HAL_TIMEx_PWMN_Start+0x118>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a1d      	ldr	r2, [pc, #116]	@ (8004944 <HAL_TIMEx_PWMN_Start+0x160>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d013      	beq.n	80048fc <HAL_TIMEx_PWMN_Start+0x118>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004948 <HAL_TIMEx_PWMN_Start+0x164>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d00e      	beq.n	80048fc <HAL_TIMEx_PWMN_Start+0x118>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a1a      	ldr	r2, [pc, #104]	@ (800494c <HAL_TIMEx_PWMN_Start+0x168>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d009      	beq.n	80048fc <HAL_TIMEx_PWMN_Start+0x118>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a18      	ldr	r2, [pc, #96]	@ (8004950 <HAL_TIMEx_PWMN_Start+0x16c>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d004      	beq.n	80048fc <HAL_TIMEx_PWMN_Start+0x118>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a17      	ldr	r2, [pc, #92]	@ (8004954 <HAL_TIMEx_PWMN_Start+0x170>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d111      	bne.n	8004920 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2b06      	cmp	r3, #6
 800490c:	d010      	beq.n	8004930 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f042 0201 	orr.w	r2, r2, #1
 800491c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800491e:	e007      	b.n	8004930 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0201 	orr.w	r2, r2, #1
 800492e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	40010000 	.word	0x40010000
 8004940:	40000400 	.word	0x40000400
 8004944:	40000800 	.word	0x40000800
 8004948:	40000c00 	.word	0x40000c00
 800494c:	40010400 	.word	0x40010400
 8004950:	40014000 	.word	0x40014000
 8004954:	40001800 	.word	0x40001800

08004958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004968:	2b01      	cmp	r3, #1
 800496a:	d101      	bne.n	8004970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800496c:	2302      	movs	r3, #2
 800496e:	e05a      	b.n	8004a26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004996:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a21      	ldr	r2, [pc, #132]	@ (8004a34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d022      	beq.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049bc:	d01d      	beq.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a1d      	ldr	r2, [pc, #116]	@ (8004a38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d018      	beq.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a1b      	ldr	r2, [pc, #108]	@ (8004a3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d013      	beq.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a1a      	ldr	r2, [pc, #104]	@ (8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d00e      	beq.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a18      	ldr	r2, [pc, #96]	@ (8004a44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d009      	beq.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a17      	ldr	r2, [pc, #92]	@ (8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d004      	beq.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a15      	ldr	r2, [pc, #84]	@ (8004a4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d10c      	bne.n	8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	40010000 	.word	0x40010000
 8004a38:	40000400 	.word	0x40000400
 8004a3c:	40000800 	.word	0x40000800
 8004a40:	40000c00 	.word	0x40000c00
 8004a44:	40010400 	.word	0x40010400
 8004a48:	40014000 	.word	0x40014000
 8004a4c:	40001800 	.word	0x40001800

08004a50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d101      	bne.n	8004a6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e03d      	b.n	8004ae8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	2204      	movs	r2, #4
 8004b30:	fa02 f303 	lsl.w	r3, r2, r3
 8004b34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a1a      	ldr	r2, [r3, #32]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	401a      	ands	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a1a      	ldr	r2, [r3, #32]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	fa01 f303 	lsl.w	r3, r1, r3
 8004b54:	431a      	orrs	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	621a      	str	r2, [r3, #32]
}
 8004b5a:	bf00      	nop
 8004b5c:	371c      	adds	r7, #28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b08b      	sub	sp, #44	@ 0x2c
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	fa93 f3a3 	rbit	r3, r3
 8004b80:	613b      	str	r3, [r7, #16]
  return result;
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8004b8c:	2320      	movs	r3, #32
 8004b8e:	e003      	b.n	8004b98 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	fab3 f383 	clz	r3, r3
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	2103      	movs	r1, #3
 8004b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba0:	43db      	mvns	r3, r3
 8004ba2:	401a      	ands	r2, r3
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba8:	6a3b      	ldr	r3, [r7, #32]
 8004baa:	fa93 f3a3 	rbit	r3, r3
 8004bae:	61fb      	str	r3, [r7, #28]
  return result;
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8004bba:	2320      	movs	r3, #32
 8004bbc:	e003      	b.n	8004bc6 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc0:	fab3 f383 	clz	r3, r3
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	6879      	ldr	r1, [r7, #4]
 8004bca:	fa01 f303 	lsl.w	r3, r1, r3
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	601a      	str	r2, [r3, #0]
}
 8004bd4:	bf00      	nop
 8004bd6:	372c      	adds	r7, #44	@ 0x2c
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	43db      	mvns	r3, r3
 8004bf4:	401a      	ands	r2, r3
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	6879      	ldr	r1, [r7, #4]
 8004bfa:	fb01 f303 	mul.w	r3, r1, r3
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	605a      	str	r2, [r3, #4]
}
 8004c04:	bf00      	nop
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b08b      	sub	sp, #44	@ 0x2c
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	fa93 f3a3 	rbit	r3, r3
 8004c2a:	613b      	str	r3, [r7, #16]
  return result;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8004c36:	2320      	movs	r3, #32
 8004c38:	e003      	b.n	8004c42 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	fab3 f383 	clz	r3, r3
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	2103      	movs	r1, #3
 8004c46:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4a:	43db      	mvns	r3, r3
 8004c4c:	401a      	ands	r2, r3
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c52:	6a3b      	ldr	r3, [r7, #32]
 8004c54:	fa93 f3a3 	rbit	r3, r3
 8004c58:	61fb      	str	r3, [r7, #28]
  return result;
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8004c64:	2320      	movs	r3, #32
 8004c66:	e003      	b.n	8004c70 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8004c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6a:	fab3 f383 	clz	r3, r3
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	6879      	ldr	r1, [r7, #4]
 8004c74:	fa01 f303 	lsl.w	r3, r1, r3
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8004c7e:	bf00      	nop
 8004c80:	372c      	adds	r7, #44	@ 0x2c
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b08b      	sub	sp, #44	@ 0x2c
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	60f8      	str	r0, [r7, #12]
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	fa93 f3a3 	rbit	r3, r3
 8004ca4:	613b      	str	r3, [r7, #16]
  return result;
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8004cb0:	2320      	movs	r3, #32
 8004cb2:	e003      	b.n	8004cbc <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	fab3 f383 	clz	r3, r3
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	2103      	movs	r1, #3
 8004cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	401a      	ands	r2, r3
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	fa93 f3a3 	rbit	r3, r3
 8004cd2:	61fb      	str	r3, [r7, #28]
  return result;
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8004cde:	2320      	movs	r3, #32
 8004ce0:	e003      	b.n	8004cea <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce4:	fab3 f383 	clz	r3, r3
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	6879      	ldr	r1, [r7, #4]
 8004cee:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	60da      	str	r2, [r3, #12]
}
 8004cf8:	bf00      	nop
 8004cfa:	372c      	adds	r7, #44	@ 0x2c
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b08b      	sub	sp, #44	@ 0x2c
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a1a      	ldr	r2, [r3, #32]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	fa93 f3a3 	rbit	r3, r3
 8004d1e:	613b      	str	r3, [r7, #16]
  return result;
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8004d2a:	2320      	movs	r3, #32
 8004d2c:	e003      	b.n	8004d36 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	fab3 f383 	clz	r3, r3
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	210f      	movs	r1, #15
 8004d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d3e:	43db      	mvns	r3, r3
 8004d40:	401a      	ands	r2, r3
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d46:	6a3b      	ldr	r3, [r7, #32]
 8004d48:	fa93 f3a3 	rbit	r3, r3
 8004d4c:	61fb      	str	r3, [r7, #28]
  return result;
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8004d58:	2320      	movs	r3, #32
 8004d5a:	e003      	b.n	8004d64 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5e:	fab3 f383 	clz	r3, r3
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	6879      	ldr	r1, [r7, #4]
 8004d68:	fa01 f303 	lsl.w	r3, r1, r3
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8004d72:	bf00      	nop
 8004d74:	372c      	adds	r7, #44	@ 0x2c
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b08b      	sub	sp, #44	@ 0x2c
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	0a1b      	lsrs	r3, r3, #8
 8004d92:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	fa93 f3a3 	rbit	r3, r3
 8004d9a:	613b      	str	r3, [r7, #16]
  return result;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8004da6:	2320      	movs	r3, #32
 8004da8:	e003      	b.n	8004db2 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	fab3 f383 	clz	r3, r3
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	210f      	movs	r1, #15
 8004db6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dba:	43db      	mvns	r3, r3
 8004dbc:	401a      	ands	r2, r3
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	0a1b      	lsrs	r3, r3, #8
 8004dc2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	fa93 f3a3 	rbit	r3, r3
 8004dca:	61fb      	str	r3, [r7, #28]
  return result;
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8004dd6:	2320      	movs	r3, #32
 8004dd8:	e003      	b.n	8004de2 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8004dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ddc:	fab3 f383 	clz	r3, r3
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	6879      	ldr	r1, [r7, #4]
 8004de6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dea:	431a      	orrs	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8004df0:	bf00      	nop
 8004df2:	372c      	adds	r7, #44	@ 0x2c
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08a      	sub	sp, #40	@ 0x28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	fa93 f3a3 	rbit	r3, r3
 8004e1a:	617b      	str	r3, [r7, #20]
  return result;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <LL_GPIO_Init+0x2e>
    return 32U;
 8004e26:	2320      	movs	r3, #32
 8004e28:	e003      	b.n	8004e32 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	fab3 f383 	clz	r3, r3
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004e34:	e057      	b.n	8004ee6 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e42:	4013      	ands	r3, r2
 8004e44:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d049      	beq.n	8004ee0 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d003      	beq.n	8004e5c <LL_GPIO_Init+0x60>
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d10d      	bne.n	8004e78 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	461a      	mov	r2, r3
 8004e62:	6a39      	ldr	r1, [r7, #32]
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff fed3 	bl	8004c10 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	6a39      	ldr	r1, [r7, #32]
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7ff feb4 	bl	8004be0 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	6a39      	ldr	r1, [r7, #32]
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7ff ff02 	bl	8004c8a <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d121      	bne.n	8004ed2 <LL_GPIO_Init+0xd6>
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	fa93 f3a3 	rbit	r3, r3
 8004e98:	60bb      	str	r3, [r7, #8]
  return result;
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <LL_GPIO_Init+0xac>
    return 32U;
 8004ea4:	2320      	movs	r3, #32
 8004ea6:	e003      	b.n	8004eb0 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	fab3 f383 	clz	r3, r3
 8004eae:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004eb0:	2b07      	cmp	r3, #7
 8004eb2:	d807      	bhi.n	8004ec4 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	461a      	mov	r2, r3
 8004eba:	6a39      	ldr	r1, [r7, #32]
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f7ff ff21 	bl	8004d04 <LL_GPIO_SetAFPin_0_7>
 8004ec2:	e006      	b.n	8004ed2 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	6a39      	ldr	r1, [r7, #32]
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7ff ff56 	bl	8004d7e <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	6a39      	ldr	r1, [r7, #32]
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7ff fe43 	bl	8004b66 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eec:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1a0      	bne.n	8004e36 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3728      	adds	r7, #40	@ 0x28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004f04:	4b04      	ldr	r3, [pc, #16]	@ (8004f18 <LL_RCC_GetSysClkSource+0x18>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f003 030c 	and.w	r3, r3, #12
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	40023800 	.word	0x40023800

08004f1c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004f20:	4b04      	ldr	r3, [pc, #16]	@ (8004f34 <LL_RCC_GetAHBPrescaler+0x18>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	40023800 	.word	0x40023800

08004f38 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004f3c:	4b04      	ldr	r3, [pc, #16]	@ (8004f50 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	40023800 	.word	0x40023800

08004f54 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004f58:	4b04      	ldr	r3, [pc, #16]	@ (8004f6c <LL_RCC_GetAPB2Prescaler+0x18>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	40023800 	.word	0x40023800

08004f70 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004f74:	4b04      	ldr	r3, [pc, #16]	@ (8004f88 <LL_RCC_PLL_GetMainSource+0x18>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40023800 	.word	0x40023800

08004f8c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004f90:	4b04      	ldr	r3, [pc, #16]	@ (8004fa4 <LL_RCC_PLL_GetN+0x18>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	099b      	lsrs	r3, r3, #6
 8004f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	40023800 	.word	0x40023800

08004fa8 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004fac:	4b04      	ldr	r3, [pc, #16]	@ (8004fc0 <LL_RCC_PLL_GetP+0x18>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	40023800 	.word	0x40023800

08004fc4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004fc8:	4b04      	ldr	r3, [pc, #16]	@ (8004fdc <LL_RCC_PLL_GetR+0x18>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40023800 	.word	0x40023800

08004fe0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004fe4:	4b04      	ldr	r3, [pc, #16]	@ (8004ff8 <LL_RCC_PLL_GetDivider+0x18>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	40023800 	.word	0x40023800

08004ffc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8005004:	f000 f820 	bl	8005048 <RCC_GetSystemClockFreq>
 8005008:	4602      	mov	r2, r0
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4618      	mov	r0, r3
 8005014:	f000 f85a 	bl	80050cc <RCC_GetHCLKClockFreq>
 8005018:	4602      	mov	r2, r0
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	4618      	mov	r0, r3
 8005024:	f000 f868 	bl	80050f8 <RCC_GetPCLK1ClockFreq>
 8005028:	4602      	mov	r2, r0
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	4618      	mov	r0, r3
 8005034:	f000 f874 	bl	8005120 <RCC_GetPCLK2ClockFreq>
 8005038:	4602      	mov	r2, r0
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	60da      	str	r2, [r3, #12]
}
 800503e:	bf00      	nop
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
	...

08005048 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800504e:	2300      	movs	r3, #0
 8005050:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005052:	f7ff ff55 	bl	8004f00 <LL_RCC_GetSysClkSource>
 8005056:	4603      	mov	r3, r0
 8005058:	2b0c      	cmp	r3, #12
 800505a:	d82d      	bhi.n	80050b8 <RCC_GetSystemClockFreq+0x70>
 800505c:	a201      	add	r2, pc, #4	@ (adr r2, 8005064 <RCC_GetSystemClockFreq+0x1c>)
 800505e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005062:	bf00      	nop
 8005064:	08005099 	.word	0x08005099
 8005068:	080050b9 	.word	0x080050b9
 800506c:	080050b9 	.word	0x080050b9
 8005070:	080050b9 	.word	0x080050b9
 8005074:	0800509f 	.word	0x0800509f
 8005078:	080050b9 	.word	0x080050b9
 800507c:	080050b9 	.word	0x080050b9
 8005080:	080050b9 	.word	0x080050b9
 8005084:	080050a5 	.word	0x080050a5
 8005088:	080050b9 	.word	0x080050b9
 800508c:	080050b9 	.word	0x080050b9
 8005090:	080050b9 	.word	0x080050b9
 8005094:	080050af 	.word	0x080050af
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005098:	4b0b      	ldr	r3, [pc, #44]	@ (80050c8 <RCC_GetSystemClockFreq+0x80>)
 800509a:	607b      	str	r3, [r7, #4]
      break;
 800509c:	e00f      	b.n	80050be <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800509e:	4b0a      	ldr	r3, [pc, #40]	@ (80050c8 <RCC_GetSystemClockFreq+0x80>)
 80050a0:	607b      	str	r3, [r7, #4]
      break;
 80050a2:	e00c      	b.n	80050be <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80050a4:	2008      	movs	r0, #8
 80050a6:	f000 f84f 	bl	8005148 <RCC_PLL_GetFreqDomain_SYS>
 80050aa:	6078      	str	r0, [r7, #4]
      break;
 80050ac:	e007      	b.n	80050be <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 80050ae:	200c      	movs	r0, #12
 80050b0:	f000 f84a 	bl	8005148 <RCC_PLL_GetFreqDomain_SYS>
 80050b4:	6078      	str	r0, [r7, #4]
      break;
 80050b6:	e002      	b.n	80050be <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80050b8:	4b03      	ldr	r3, [pc, #12]	@ (80050c8 <RCC_GetSystemClockFreq+0x80>)
 80050ba:	607b      	str	r3, [r7, #4]
      break;
 80050bc:	bf00      	nop
  }

  return frequency;
 80050be:	687b      	ldr	r3, [r7, #4]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	00f42400 	.word	0x00f42400

080050cc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80050d4:	f7ff ff22 	bl	8004f1c <LL_RCC_GetAHBPrescaler>
 80050d8:	4603      	mov	r3, r0
 80050da:	091b      	lsrs	r3, r3, #4
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	4a04      	ldr	r2, [pc, #16]	@ (80050f4 <RCC_GetHCLKClockFreq+0x28>)
 80050e2:	5cd3      	ldrb	r3, [r2, r3]
 80050e4:	461a      	mov	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	40d3      	lsrs	r3, r2
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	08005828 	.word	0x08005828

080050f8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005100:	f7ff ff1a 	bl	8004f38 <LL_RCC_GetAPB1Prescaler>
 8005104:	4603      	mov	r3, r0
 8005106:	0a9b      	lsrs	r3, r3, #10
 8005108:	4a04      	ldr	r2, [pc, #16]	@ (800511c <RCC_GetPCLK1ClockFreq+0x24>)
 800510a:	5cd3      	ldrb	r3, [r2, r3]
 800510c:	461a      	mov	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	40d3      	lsrs	r3, r2
}
 8005112:	4618      	mov	r0, r3
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	08005838 	.word	0x08005838

08005120 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005128:	f7ff ff14 	bl	8004f54 <LL_RCC_GetAPB2Prescaler>
 800512c:	4603      	mov	r3, r0
 800512e:	0b5b      	lsrs	r3, r3, #13
 8005130:	4a04      	ldr	r2, [pc, #16]	@ (8005144 <RCC_GetPCLK2ClockFreq+0x24>)
 8005132:	5cd3      	ldrb	r3, [r2, r3]
 8005134:	461a      	mov	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	40d3      	lsrs	r3, r2
}
 800513a:	4618      	mov	r0, r3
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	08005838 	.word	0x08005838

08005148 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8005148:	b590      	push	{r4, r7, lr}
 800514a:	b087      	sub	sp, #28
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8005154:	2300      	movs	r3, #0
 8005156:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8005158:	2300      	movs	r3, #0
 800515a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800515c:	f7ff ff08 	bl	8004f70 <LL_RCC_PLL_GetMainSource>
 8005160:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d004      	beq.n	8005172 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800516e:	d003      	beq.n	8005178 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8005170:	e005      	b.n	800517e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005172:	4b1c      	ldr	r3, [pc, #112]	@ (80051e4 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8005174:	617b      	str	r3, [r7, #20]
      break;
 8005176:	e005      	b.n	8005184 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005178:	4b1a      	ldr	r3, [pc, #104]	@ (80051e4 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 800517a:	617b      	str	r3, [r7, #20]
      break;
 800517c:	e002      	b.n	8005184 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800517e:	4b19      	ldr	r3, [pc, #100]	@ (80051e4 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8005180:	617b      	str	r3, [r7, #20]
      break;
 8005182:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b08      	cmp	r3, #8
 8005188:	d114      	bne.n	80051b4 <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800518a:	f7ff ff29 	bl	8004fe0 <LL_RCC_PLL_GetDivider>
 800518e:	4602      	mov	r2, r0
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	fbb3 f4f2 	udiv	r4, r3, r2
 8005196:	f7ff fef9 	bl	8004f8c <LL_RCC_PLL_GetN>
 800519a:	4603      	mov	r3, r0
 800519c:	fb03 f404 	mul.w	r4, r3, r4
 80051a0:	f7ff ff02 	bl	8004fa8 <LL_RCC_PLL_GetP>
 80051a4:	4603      	mov	r3, r0
 80051a6:	0c1b      	lsrs	r3, r3, #16
 80051a8:	3301      	adds	r3, #1
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	fbb4 f3f3 	udiv	r3, r4, r3
 80051b0:	613b      	str	r3, [r7, #16]
 80051b2:	e011      	b.n	80051d8 <RCC_PLL_GetFreqDomain_SYS+0x90>
                                              LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80051b4:	f7ff ff14 	bl	8004fe0 <LL_RCC_PLL_GetDivider>
 80051b8:	4602      	mov	r2, r0
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	fbb3 f4f2 	udiv	r4, r3, r2
 80051c0:	f7ff fee4 	bl	8004f8c <LL_RCC_PLL_GetN>
 80051c4:	4603      	mov	r3, r0
 80051c6:	fb03 f404 	mul.w	r4, r3, r4
 80051ca:	f7ff fefb 	bl	8004fc4 <LL_RCC_PLL_GetR>
 80051ce:	4603      	mov	r3, r0
 80051d0:	0f1b      	lsrs	r3, r3, #28
 80051d2:	fbb4 f3f3 	udiv	r3, r4, r3
 80051d6:	613b      	str	r3, [r7, #16]
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80051d8:	693b      	ldr	r3, [r7, #16]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	371c      	adds	r7, #28
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd90      	pop	{r4, r7, pc}
 80051e2:	bf00      	nop
 80051e4:	00f42400 	.word	0x00f42400

080051e8 <LL_USART_IsEnabled>:
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051fc:	bf0c      	ite	eq
 80051fe:	2301      	moveq	r3, #1
 8005200:	2300      	movne	r3, #0
 8005202:	b2db      	uxtb	r3, r3
}
 8005204:	4618      	mov	r0, r3
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <LL_USART_SetStopBitsLength>:
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	431a      	orrs	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	611a      	str	r2, [r3, #16]
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <LL_USART_SetHWFlowCtrl>:
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	615a      	str	r2, [r3, #20]
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <LL_USART_SetBaudRate>:
{
 800525c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005260:	b0c0      	sub	sp, #256	@ 0x100
 8005262:	af00      	add	r7, sp, #0
 8005264:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005268:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 800526c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8005270:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005278:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800527c:	f040 810c 	bne.w	8005498 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005280:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005284:	2200      	movs	r2, #0
 8005286:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800528a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800528e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005292:	4622      	mov	r2, r4
 8005294:	462b      	mov	r3, r5
 8005296:	1891      	adds	r1, r2, r2
 8005298:	6639      	str	r1, [r7, #96]	@ 0x60
 800529a:	415b      	adcs	r3, r3
 800529c:	667b      	str	r3, [r7, #100]	@ 0x64
 800529e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80052a2:	4621      	mov	r1, r4
 80052a4:	eb12 0801 	adds.w	r8, r2, r1
 80052a8:	4629      	mov	r1, r5
 80052aa:	eb43 0901 	adc.w	r9, r3, r1
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	f04f 0300 	mov.w	r3, #0
 80052b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052c2:	4690      	mov	r8, r2
 80052c4:	4699      	mov	r9, r3
 80052c6:	4623      	mov	r3, r4
 80052c8:	eb18 0303 	adds.w	r3, r8, r3
 80052cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80052d0:	462b      	mov	r3, r5
 80052d2:	eb49 0303 	adc.w	r3, r9, r3
 80052d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80052da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80052de:	2200      	movs	r2, #0
 80052e0:	469a      	mov	sl, r3
 80052e2:	4693      	mov	fp, r2
 80052e4:	eb1a 030a 	adds.w	r3, sl, sl
 80052e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052ea:	eb4b 030b 	adc.w	r3, fp, fp
 80052ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80052f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80052f8:	f7fa ff84 	bl	8000204 <__aeabi_uldivmod>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	4b64      	ldr	r3, [pc, #400]	@ (8005494 <LL_USART_SetBaudRate+0x238>)
 8005302:	fba3 2302 	umull	r2, r3, r3, r2
 8005306:	095b      	lsrs	r3, r3, #5
 8005308:	b29b      	uxth	r3, r3
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	b29c      	uxth	r4, r3
 800530e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005312:	2200      	movs	r2, #0
 8005314:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005318:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800531c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8005320:	4642      	mov	r2, r8
 8005322:	464b      	mov	r3, r9
 8005324:	1891      	adds	r1, r2, r2
 8005326:	6539      	str	r1, [r7, #80]	@ 0x50
 8005328:	415b      	adcs	r3, r3
 800532a:	657b      	str	r3, [r7, #84]	@ 0x54
 800532c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005330:	4641      	mov	r1, r8
 8005332:	1851      	adds	r1, r2, r1
 8005334:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005336:	4649      	mov	r1, r9
 8005338:	414b      	adcs	r3, r1
 800533a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800533c:	f04f 0200 	mov.w	r2, #0
 8005340:	f04f 0300 	mov.w	r3, #0
 8005344:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8005348:	4659      	mov	r1, fp
 800534a:	00cb      	lsls	r3, r1, #3
 800534c:	4651      	mov	r1, sl
 800534e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005352:	4651      	mov	r1, sl
 8005354:	00ca      	lsls	r2, r1, #3
 8005356:	4610      	mov	r0, r2
 8005358:	4619      	mov	r1, r3
 800535a:	4603      	mov	r3, r0
 800535c:	4642      	mov	r2, r8
 800535e:	189b      	adds	r3, r3, r2
 8005360:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005364:	464b      	mov	r3, r9
 8005366:	460a      	mov	r2, r1
 8005368:	eb42 0303 	adc.w	r3, r2, r3
 800536c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005370:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005374:	2200      	movs	r2, #0
 8005376:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800537a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800537e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005382:	460b      	mov	r3, r1
 8005384:	18db      	adds	r3, r3, r3
 8005386:	643b      	str	r3, [r7, #64]	@ 0x40
 8005388:	4613      	mov	r3, r2
 800538a:	eb42 0303 	adc.w	r3, r2, r3
 800538e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005390:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005394:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8005398:	f7fa ff34 	bl	8000204 <__aeabi_uldivmod>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4611      	mov	r1, r2
 80053a2:	4b3c      	ldr	r3, [pc, #240]	@ (8005494 <LL_USART_SetBaudRate+0x238>)
 80053a4:	fba3 2301 	umull	r2, r3, r3, r1
 80053a8:	095b      	lsrs	r3, r3, #5
 80053aa:	2264      	movs	r2, #100	@ 0x64
 80053ac:	fb02 f303 	mul.w	r3, r2, r3
 80053b0:	1acb      	subs	r3, r1, r3
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80053b8:	4b36      	ldr	r3, [pc, #216]	@ (8005494 <LL_USART_SetBaudRate+0x238>)
 80053ba:	fba3 2302 	umull	r2, r3, r3, r2
 80053be:	095b      	lsrs	r3, r3, #5
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	4423      	add	r3, r4
 80053ce:	b29c      	uxth	r4, r3
 80053d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053d4:	2200      	movs	r2, #0
 80053d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80053da:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80053de:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 80053e2:	4642      	mov	r2, r8
 80053e4:	464b      	mov	r3, r9
 80053e6:	1891      	adds	r1, r2, r2
 80053e8:	63b9      	str	r1, [r7, #56]	@ 0x38
 80053ea:	415b      	adcs	r3, r3
 80053ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053ee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80053f2:	4641      	mov	r1, r8
 80053f4:	1851      	adds	r1, r2, r1
 80053f6:	6339      	str	r1, [r7, #48]	@ 0x30
 80053f8:	4649      	mov	r1, r9
 80053fa:	414b      	adcs	r3, r1
 80053fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80053fe:	f04f 0200 	mov.w	r2, #0
 8005402:	f04f 0300 	mov.w	r3, #0
 8005406:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800540a:	4659      	mov	r1, fp
 800540c:	00cb      	lsls	r3, r1, #3
 800540e:	4651      	mov	r1, sl
 8005410:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005414:	4651      	mov	r1, sl
 8005416:	00ca      	lsls	r2, r1, #3
 8005418:	4610      	mov	r0, r2
 800541a:	4619      	mov	r1, r3
 800541c:	4603      	mov	r3, r0
 800541e:	4642      	mov	r2, r8
 8005420:	189b      	adds	r3, r3, r2
 8005422:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005426:	464b      	mov	r3, r9
 8005428:	460a      	mov	r2, r1
 800542a:	eb42 0303 	adc.w	r3, r2, r3
 800542e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005432:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005436:	2200      	movs	r2, #0
 8005438:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800543c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8005440:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005444:	460b      	mov	r3, r1
 8005446:	18db      	adds	r3, r3, r3
 8005448:	62bb      	str	r3, [r7, #40]	@ 0x28
 800544a:	4613      	mov	r3, r2
 800544c:	eb42 0303 	adc.w	r3, r2, r3
 8005450:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005452:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005456:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800545a:	f7fa fed3 	bl	8000204 <__aeabi_uldivmod>
 800545e:	4602      	mov	r2, r0
 8005460:	460b      	mov	r3, r1
 8005462:	4b0c      	ldr	r3, [pc, #48]	@ (8005494 <LL_USART_SetBaudRate+0x238>)
 8005464:	fba3 1302 	umull	r1, r3, r3, r2
 8005468:	095b      	lsrs	r3, r3, #5
 800546a:	2164      	movs	r1, #100	@ 0x64
 800546c:	fb01 f303 	mul.w	r3, r1, r3
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	3332      	adds	r3, #50	@ 0x32
 8005476:	4a07      	ldr	r2, [pc, #28]	@ (8005494 <LL_USART_SetBaudRate+0x238>)
 8005478:	fba2 2303 	umull	r2, r3, r2, r3
 800547c:	095b      	lsrs	r3, r3, #5
 800547e:	b29b      	uxth	r3, r3
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	b29b      	uxth	r3, r3
 8005486:	4423      	add	r3, r4
 8005488:	b29b      	uxth	r3, r3
 800548a:	461a      	mov	r2, r3
 800548c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005490:	609a      	str	r2, [r3, #8]
}
 8005492:	e108      	b.n	80056a6 <LL_USART_SetBaudRate+0x44a>
 8005494:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005498:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800549c:	2200      	movs	r2, #0
 800549e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80054a2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80054a6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80054aa:	4642      	mov	r2, r8
 80054ac:	464b      	mov	r3, r9
 80054ae:	1891      	adds	r1, r2, r2
 80054b0:	6239      	str	r1, [r7, #32]
 80054b2:	415b      	adcs	r3, r3
 80054b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80054b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054ba:	4641      	mov	r1, r8
 80054bc:	1854      	adds	r4, r2, r1
 80054be:	4649      	mov	r1, r9
 80054c0:	eb43 0501 	adc.w	r5, r3, r1
 80054c4:	f04f 0200 	mov.w	r2, #0
 80054c8:	f04f 0300 	mov.w	r3, #0
 80054cc:	00eb      	lsls	r3, r5, #3
 80054ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054d2:	00e2      	lsls	r2, r4, #3
 80054d4:	4614      	mov	r4, r2
 80054d6:	461d      	mov	r5, r3
 80054d8:	4643      	mov	r3, r8
 80054da:	18e3      	adds	r3, r4, r3
 80054dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80054e0:	464b      	mov	r3, r9
 80054e2:	eb45 0303 	adc.w	r3, r5, r3
 80054e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80054ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80054ee:	2200      	movs	r2, #0
 80054f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80054f4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80054f8:	f04f 0200 	mov.w	r2, #0
 80054fc:	f04f 0300 	mov.w	r3, #0
 8005500:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8005504:	4629      	mov	r1, r5
 8005506:	008b      	lsls	r3, r1, #2
 8005508:	4621      	mov	r1, r4
 800550a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800550e:	4621      	mov	r1, r4
 8005510:	008a      	lsls	r2, r1, #2
 8005512:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8005516:	f7fa fe75 	bl	8000204 <__aeabi_uldivmod>
 800551a:	4602      	mov	r2, r0
 800551c:	460b      	mov	r3, r1
 800551e:	4b65      	ldr	r3, [pc, #404]	@ (80056b4 <LL_USART_SetBaudRate+0x458>)
 8005520:	fba3 2302 	umull	r2, r3, r3, r2
 8005524:	095b      	lsrs	r3, r3, #5
 8005526:	b29b      	uxth	r3, r3
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	b29c      	uxth	r4, r3
 800552c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005530:	2200      	movs	r2, #0
 8005532:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005536:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800553a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800553e:	4642      	mov	r2, r8
 8005540:	464b      	mov	r3, r9
 8005542:	1891      	adds	r1, r2, r2
 8005544:	61b9      	str	r1, [r7, #24]
 8005546:	415b      	adcs	r3, r3
 8005548:	61fb      	str	r3, [r7, #28]
 800554a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800554e:	4641      	mov	r1, r8
 8005550:	1851      	adds	r1, r2, r1
 8005552:	6139      	str	r1, [r7, #16]
 8005554:	4649      	mov	r1, r9
 8005556:	414b      	adcs	r3, r1
 8005558:	617b      	str	r3, [r7, #20]
 800555a:	f04f 0200 	mov.w	r2, #0
 800555e:	f04f 0300 	mov.w	r3, #0
 8005562:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005566:	4659      	mov	r1, fp
 8005568:	00cb      	lsls	r3, r1, #3
 800556a:	4651      	mov	r1, sl
 800556c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005570:	4651      	mov	r1, sl
 8005572:	00ca      	lsls	r2, r1, #3
 8005574:	4610      	mov	r0, r2
 8005576:	4619      	mov	r1, r3
 8005578:	4603      	mov	r3, r0
 800557a:	4642      	mov	r2, r8
 800557c:	189b      	adds	r3, r3, r2
 800557e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005582:	464b      	mov	r3, r9
 8005584:	460a      	mov	r2, r1
 8005586:	eb42 0303 	adc.w	r3, r2, r3
 800558a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800558e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005592:	2200      	movs	r2, #0
 8005594:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005598:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	f04f 0300 	mov.w	r3, #0
 80055a4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80055a8:	4649      	mov	r1, r9
 80055aa:	008b      	lsls	r3, r1, #2
 80055ac:	4641      	mov	r1, r8
 80055ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055b2:	4641      	mov	r1, r8
 80055b4:	008a      	lsls	r2, r1, #2
 80055b6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80055ba:	f7fa fe23 	bl	8000204 <__aeabi_uldivmod>
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	4611      	mov	r1, r2
 80055c4:	4b3b      	ldr	r3, [pc, #236]	@ (80056b4 <LL_USART_SetBaudRate+0x458>)
 80055c6:	fba3 2301 	umull	r2, r3, r3, r1
 80055ca:	095b      	lsrs	r3, r3, #5
 80055cc:	2264      	movs	r2, #100	@ 0x64
 80055ce:	fb02 f303 	mul.w	r3, r2, r3
 80055d2:	1acb      	subs	r3, r1, r3
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	3332      	adds	r3, #50	@ 0x32
 80055d8:	4a36      	ldr	r2, [pc, #216]	@ (80056b4 <LL_USART_SetBaudRate+0x458>)
 80055da:	fba2 2303 	umull	r2, r3, r2, r3
 80055de:	095b      	lsrs	r3, r3, #5
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	4423      	add	r3, r4
 80055ea:	b29c      	uxth	r4, r3
 80055ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80055f0:	2200      	movs	r2, #0
 80055f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80055f4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80055f6:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80055fa:	4642      	mov	r2, r8
 80055fc:	464b      	mov	r3, r9
 80055fe:	1891      	adds	r1, r2, r2
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	415b      	adcs	r3, r3
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800560a:	4641      	mov	r1, r8
 800560c:	1851      	adds	r1, r2, r1
 800560e:	6039      	str	r1, [r7, #0]
 8005610:	4649      	mov	r1, r9
 8005612:	414b      	adcs	r3, r1
 8005614:	607b      	str	r3, [r7, #4]
 8005616:	f04f 0200 	mov.w	r2, #0
 800561a:	f04f 0300 	mov.w	r3, #0
 800561e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005622:	4659      	mov	r1, fp
 8005624:	00cb      	lsls	r3, r1, #3
 8005626:	4651      	mov	r1, sl
 8005628:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800562c:	4651      	mov	r1, sl
 800562e:	00ca      	lsls	r2, r1, #3
 8005630:	4610      	mov	r0, r2
 8005632:	4619      	mov	r1, r3
 8005634:	4603      	mov	r3, r0
 8005636:	4642      	mov	r2, r8
 8005638:	189b      	adds	r3, r3, r2
 800563a:	673b      	str	r3, [r7, #112]	@ 0x70
 800563c:	464b      	mov	r3, r9
 800563e:	460a      	mov	r2, r1
 8005640:	eb42 0303 	adc.w	r3, r2, r3
 8005644:	677b      	str	r3, [r7, #116]	@ 0x74
 8005646:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800564a:	2200      	movs	r2, #0
 800564c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800564e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005650:	f04f 0200 	mov.w	r2, #0
 8005654:	f04f 0300 	mov.w	r3, #0
 8005658:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 800565c:	4649      	mov	r1, r9
 800565e:	008b      	lsls	r3, r1, #2
 8005660:	4641      	mov	r1, r8
 8005662:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005666:	4641      	mov	r1, r8
 8005668:	008a      	lsls	r2, r1, #2
 800566a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800566e:	f7fa fdc9 	bl	8000204 <__aeabi_uldivmod>
 8005672:	4602      	mov	r2, r0
 8005674:	460b      	mov	r3, r1
 8005676:	4b0f      	ldr	r3, [pc, #60]	@ (80056b4 <LL_USART_SetBaudRate+0x458>)
 8005678:	fba3 1302 	umull	r1, r3, r3, r2
 800567c:	095b      	lsrs	r3, r3, #5
 800567e:	2164      	movs	r1, #100	@ 0x64
 8005680:	fb01 f303 	mul.w	r3, r1, r3
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	011b      	lsls	r3, r3, #4
 8005688:	3332      	adds	r3, #50	@ 0x32
 800568a:	4a0a      	ldr	r2, [pc, #40]	@ (80056b4 <LL_USART_SetBaudRate+0x458>)
 800568c:	fba2 2303 	umull	r2, r3, r2, r3
 8005690:	095b      	lsrs	r3, r3, #5
 8005692:	b29b      	uxth	r3, r3
 8005694:	f003 030f 	and.w	r3, r3, #15
 8005698:	b29b      	uxth	r3, r3
 800569a:	4423      	add	r3, r4
 800569c:	b29b      	uxth	r3, r3
 800569e:	461a      	mov	r2, r3
 80056a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056a4:	609a      	str	r2, [r3, #8]
}
 80056a6:	bf00      	nop
 80056a8:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80056ac:	46bd      	mov	sp, r7
 80056ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056b2:	bf00      	nop
 80056b4:	51eb851f 	.word	0x51eb851f

080056b8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b088      	sub	sp, #32
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80056c6:	2300      	movs	r3, #0
 80056c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7ff fd8c 	bl	80051e8 <LL_USART_IsEnabled>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d15e      	bne.n	8005794 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80056de:	f023 030c 	bic.w	r3, r3, #12
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	6851      	ldr	r1, [r2, #4]
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	68d2      	ldr	r2, [r2, #12]
 80056ea:	4311      	orrs	r1, r2
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	6912      	ldr	r2, [r2, #16]
 80056f0:	4311      	orrs	r1, r2
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	6992      	ldr	r2, [r2, #24]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	431a      	orrs	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	4619      	mov	r1, r3
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff fd83 	bl	8005210 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	4619      	mov	r1, r3
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f7ff fd90 	bl	8005236 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005716:	f107 0308 	add.w	r3, r7, #8
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff fc6e 	bl	8004ffc <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a1f      	ldr	r2, [pc, #124]	@ (80057a0 <LL_USART_Init+0xe8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d102      	bne.n	800572e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	61bb      	str	r3, [r7, #24]
 800572c:	e021      	b.n	8005772 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a1c      	ldr	r2, [pc, #112]	@ (80057a4 <LL_USART_Init+0xec>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d102      	bne.n	800573c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	61bb      	str	r3, [r7, #24]
 800573a:	e01a      	b.n	8005772 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a1a      	ldr	r2, [pc, #104]	@ (80057a8 <LL_USART_Init+0xf0>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d102      	bne.n	800574a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	61bb      	str	r3, [r7, #24]
 8005748:	e013      	b.n	8005772 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a17      	ldr	r2, [pc, #92]	@ (80057ac <LL_USART_Init+0xf4>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d102      	bne.n	8005758 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	61bb      	str	r3, [r7, #24]
 8005756:	e00c      	b.n	8005772 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a15      	ldr	r2, [pc, #84]	@ (80057b0 <LL_USART_Init+0xf8>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d102      	bne.n	8005766 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	61bb      	str	r3, [r7, #24]
 8005764:	e005      	b.n	8005772 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a12      	ldr	r2, [pc, #72]	@ (80057b4 <LL_USART_Init+0xfc>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d101      	bne.n	8005772 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00d      	beq.n	8005794 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d009      	beq.n	8005794 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8005780:	2300      	movs	r3, #0
 8005782:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800578c:	69b9      	ldr	r1, [r7, #24]
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7ff fd64 	bl	800525c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005794:	7ffb      	ldrb	r3, [r7, #31]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3720      	adds	r7, #32
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	40011000 	.word	0x40011000
 80057a4:	40004400 	.word	0x40004400
 80057a8:	40004800 	.word	0x40004800
 80057ac:	40011400 	.word	0x40011400
 80057b0:	40004c00 	.word	0x40004c00
 80057b4:	40005000 	.word	0x40005000

080057b8 <memset>:
 80057b8:	4402      	add	r2, r0
 80057ba:	4603      	mov	r3, r0
 80057bc:	4293      	cmp	r3, r2
 80057be:	d100      	bne.n	80057c2 <memset+0xa>
 80057c0:	4770      	bx	lr
 80057c2:	f803 1b01 	strb.w	r1, [r3], #1
 80057c6:	e7f9      	b.n	80057bc <memset+0x4>

080057c8 <__libc_init_array>:
 80057c8:	b570      	push	{r4, r5, r6, lr}
 80057ca:	4d0d      	ldr	r5, [pc, #52]	@ (8005800 <__libc_init_array+0x38>)
 80057cc:	4c0d      	ldr	r4, [pc, #52]	@ (8005804 <__libc_init_array+0x3c>)
 80057ce:	1b64      	subs	r4, r4, r5
 80057d0:	10a4      	asrs	r4, r4, #2
 80057d2:	2600      	movs	r6, #0
 80057d4:	42a6      	cmp	r6, r4
 80057d6:	d109      	bne.n	80057ec <__libc_init_array+0x24>
 80057d8:	4d0b      	ldr	r5, [pc, #44]	@ (8005808 <__libc_init_array+0x40>)
 80057da:	4c0c      	ldr	r4, [pc, #48]	@ (800580c <__libc_init_array+0x44>)
 80057dc:	f000 f818 	bl	8005810 <_init>
 80057e0:	1b64      	subs	r4, r4, r5
 80057e2:	10a4      	asrs	r4, r4, #2
 80057e4:	2600      	movs	r6, #0
 80057e6:	42a6      	cmp	r6, r4
 80057e8:	d105      	bne.n	80057f6 <__libc_init_array+0x2e>
 80057ea:	bd70      	pop	{r4, r5, r6, pc}
 80057ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80057f0:	4798      	blx	r3
 80057f2:	3601      	adds	r6, #1
 80057f4:	e7ee      	b.n	80057d4 <__libc_init_array+0xc>
 80057f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057fa:	4798      	blx	r3
 80057fc:	3601      	adds	r6, #1
 80057fe:	e7f2      	b.n	80057e6 <__libc_init_array+0x1e>
 8005800:	08005858 	.word	0x08005858
 8005804:	08005858 	.word	0x08005858
 8005808:	08005858 	.word	0x08005858
 800580c:	0800585c 	.word	0x0800585c

08005810 <_init>:
 8005810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005812:	bf00      	nop
 8005814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005816:	bc08      	pop	{r3}
 8005818:	469e      	mov	lr, r3
 800581a:	4770      	bx	lr

0800581c <_fini>:
 800581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581e:	bf00      	nop
 8005820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005822:	bc08      	pop	{r3}
 8005824:	469e      	mov	lr, r3
 8005826:	4770      	bx	lr
